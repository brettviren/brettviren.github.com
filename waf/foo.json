{"html":"<div id=\"table-of-contents\">\n<h2>Table of Contents<\/h2>\n<div id=\"text-table-of-contents\">\n<ul>\n<li><a href=\"#sec-1\">1. Gestalt of waf<\/a><\/li>\n<li><a href=\"#sec-2\">2. The waf configuration file<\/a>\n<ul>\n<li><a href=\"#sec-2-1\">2.1. Commands<\/a><\/li>\n<li><a href=\"#sec-2-2\">2.2. Context object<\/a><\/li>\n<\/ul>\n<\/li>\n<li><a href=\"#sec-3\">3. Predefined commands<\/a>\n<ul>\n<li><a href=\"#sec-3-1\">3.1. Options<\/a><\/li>\n<li><a href=\"#sec-3-2\">3.2. Configure<\/a><\/li>\n<li><a href=\"#sec-3-3\">3.3. Build<\/a><\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<\/div>\n<\/div>\n<p>\nThe venerable workhorse of building software has long been <a href=\"https:\/\/www.gnu.org\/software\/make\/\"><code>make<\/code><\/a> driven by its quirky and sometimes cryptic <code>Makefile<\/code> configurations.  Anytime I must write even a moderately complex build system based on <code>make<\/code> I dream of having a simple, consistent and real programming language to describe the configuration instead of the language of a <code>Makefile<\/code>.  Lacking it, when I use <code>make<\/code> I end up relying on a zoo of external tools which leads to a hodgepodge.\n<\/p>\n\n<p>\nAt some point I came across <a href=\"http:\/\/www.scons.org\/\"><code>scons<\/code><\/a> and thought my wishes were answered.  It uses the lovely Python programming language so must be perfect. Unfortunately as I tried to use it I found a few problems and personal dislikes.  It was difficult to extend and I found the built-in functionality awkward.  These are admittedly very personal judgments.\n<\/p>\n\n<p>\nMore recently I came across <a href=\"https:\/\/code.google.com\/p\/waf\/\"><code>waf<\/code><\/a> and found it just about exactly what I was looking for.  It uses Python, it can be extended easily (it forms the basis of my meta-build system <a href=\"https:\/\/github.com\/brettviren\/worch\">worch<\/a>).  It has good, if not great <a href=\"http:\/\/docs.waf.googlecode.com\/git\/\">documentation<\/a>.  This latter issue is what this topic is meant to address.  It is written to collect my understanding as a user of waf and hopefully fill a needed gap.  It tries to provide concrete examples of how to do various things and refer to the official documentation wherever possible.\n<\/p>\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1<\/span> Gestalt of waf<\/h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\nWaf is like <code>make<\/code> but with a <code>Makefile<\/code> called <code>wscript<\/code> and written in Python.  Waf is unlike in several ways:\n<\/p>\n\n<ul class=\"org-ul\">\n<li>waf can be <a href=\"http:\/\/docs.waf.googlecode.com\/git\/book_17\/single.html#_writing_re_usable_waf_tools\">extended<\/a> by providing Python modules loaded through <code>wscript<\/code> files\n<\/li>\n\n<li>waf can be <a href=\"http:\/\/docs.waf.googlecode.com\/git\/book_17\/single.html#_obtaining_the_waf_file\">bundled<\/a> along with extensions to provide a single executable that performs specific tasks\n<\/li>\n\n<li>waf is cross-platform, no compilation needed and can be included as a single file along with the project it builds\n<\/li>\n\n<li>waf is parallel by default, it will run tasks as parallel as possible constrained by available CPU, dependencies or any limits imposed by the user\n<\/li>\n<\/ul>\n<\/div>\n<\/div>\n\n\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2<\/span> The waf configuration file<\/h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n<p>\nWaf expects to find a file called <code>wscript<\/code> in the current directory.  \n<\/p>\n<\/div>\n\n<div id=\"outline-container-sec-2-1\" class=\"outline-3\">\n<h3 id=\"sec-2-1\"><span class=\"section-number-3\">2.1<\/span> Commands<\/h3>\n<div class=\"outline-text-3\" id=\"text-2-1\">\n<p>\nFunctions in this file become exposed through waf as command line commands.  For example:\n<\/p>\n\n<div class=\"org-src-container\">\n\n<pre class=\"src src-python\"><span style=\"font-weight: bold;\">def<\/span> <span style=\"font-weight: bold;\">chirp<\/span>(ctx):\n    <span style=\"font-weight: bold;\">print<\/span> (ctx)\n<\/pre>\n<\/div>\n\n<p>\ncan be exercised as:\n<\/p>\n\n<div class=\"org-src-container\">\n\n<pre class=\"src src-sh\"><span style=\"font-weight: bold;\">cd<\/span> examples\/commands\/\nwaf chirp\n<\/pre>\n<\/div>\n\n<pre class=\"example\">\n&lt;waflib.Context.Context object at 0x28c0090&gt;\n'chirp' finished successfully (0.000s)\n<\/pre>\n<\/div>\n<\/div>\n\n\n<div id=\"outline-container-sec-2-2\" class=\"outline-3\">\n<h3 id=\"sec-2-2\"><span class=\"section-number-3\">2.2<\/span> Context object<\/h3>\n<div class=\"outline-text-3\" id=\"text-2-2\">\n<p>\nA waf command function is given a context object.  This context object may be specialized depending on the function called.  The figure from the  <a href=\"http:\/\/docs.waf.googlecode.com\/git\/apidocs_17\/Context.html\">context reference docs<\/a> shows the inheritance:\n<\/p>\n\n\n<div id=\"fig:context-inheritance\" class=\"figure\">\n<p><img src=\".\/context-inheritance.png\" alt=\"context-inheritance.png\" \/>\n<\/p>\n<p><span class=\"figure-number\">Figure 1:<\/span> Inheritance of context classes.  Note, the arrows are reversed from the sense they would be drawn in a UML inheritance diagram.<\/p>\n<\/div>\n<\/div>\n<\/div>\n<\/div>\n\n<div id=\"outline-container-sec-3\" class=\"outline-2\">\n<h2 id=\"sec-3\"><span class=\"section-number-2\">3<\/span> Predefined commands<\/h2>\n<div class=\"outline-text-2\" id=\"text-3\">\n<p>\nCertain commands are reserved and treated special by waf.\n<\/p>\n<\/div>\n\n<div id=\"outline-container-sec-3-1\" class=\"outline-3\">\n<h3 id=\"sec-3-1\"><span class=\"section-number-3\">3.1<\/span> Options<\/h3>\n<div class=\"outline-text-3\" id=\"text-3-1\">\n<p>\nThe <code>options(ctx)<\/code> function will be passed an <a href=\"http:\/\/docs.waf.googlecode.com\/git\/apidocs_17\/Options.html\">options<\/a> context object.  This function can be used to define command line options that waf will recognize on behalf of the project.\n<\/p>\n\n<div class=\"org-src-container\">\n\n<pre class=\"src src-python\"><span style=\"font-weight: bold;\">def<\/span> <span style=\"font-weight: bold;\">options<\/span>(opt):\n    opt.add_option(<span style=\"font-style: italic;\">'-x'<\/span>,<span style=\"font-style: italic;\">'--extra'<\/span>,action=<span style=\"font-style: italic;\">'store'<\/span>, \n                   <span style=\"font-weight: bold;\">help<\/span>=<span style=\"font-style: italic;\">'Add something extra from the command line'<\/span>)\n\n<span style=\"font-weight: bold;\">def<\/span> <span style=\"font-weight: bold;\">chirp<\/span>(ctx):\n    <span style=\"font-weight: bold;\">print<\/span> (<span style=\"font-style: italic;\">'The little bit of extra is: \"%s\"'<\/span> % ctx.options.extra)\n<\/pre>\n<\/div>\n\n<div class=\"org-src-container\">\n\n<pre class=\"src src-sh\"><span style=\"font-weight: bold;\">cd<\/span> examples\/options\/\nwaf --extra=<span style=\"font-style: italic;\">'Just a bit of extra stuff'<\/span> chirp\n<\/pre>\n<\/div>\n<\/div>\n<\/div>\n\n<div id=\"outline-container-sec-3-2\" class=\"outline-3\">\n<h3 id=\"sec-3-2\"><span class=\"section-number-3\">3.2<\/span> Configure<\/h3>\n<div class=\"outline-text-3\" id=\"text-3-2\">\n<p>\nThe <code>configure(cfg)<\/code> function is passed a <a href=\"http:\/\/docs.waf.googlecode.com\/git\/apidocs_17\/Configure.html\">configuration<\/a> context object.  This function can be used to persist any information between other command calls.  On possible use is to make command line options persisted.\n<\/p>\n\n<div class=\"org-src-container\">\n\n<pre class=\"src src-python\"><span style=\"font-weight: bold;\">def<\/span> <span style=\"font-weight: bold;\">options<\/span>(opt):\n    opt.add_option(<span style=\"font-style: italic;\">'-x'<\/span>,<span style=\"font-style: italic;\">'--extra'<\/span>,action=<span style=\"font-style: italic;\">'store'<\/span>, \n                   <span style=\"font-weight: bold;\">help<\/span>=<span style=\"font-style: italic;\">'Add something extra from the command line'<\/span>)\n\n<span style=\"font-weight: bold;\">def<\/span> <span style=\"font-weight: bold;\">configure<\/span>(cfg):\n    <span style=\"font-weight: bold; font-style: italic;\">cfg.env.EXTRA_MSG<\/span> = <span style=\"font-style: italic;\">'The little bit of extra is: \"%s\"'<\/span> % cfg.options.extra\n\n<span style=\"font-weight: bold;\">def<\/span> <span style=\"font-weight: bold;\">build<\/span>(bld):\n    <span style=\"font-weight: bold;\">print<\/span> (bld.env.EXTRA_MSG)\n<\/pre>\n<\/div>\n\n<div class=\"org-src-container\">\n\n<pre class=\"src src-sh\"><span style=\"font-weight: bold;\">cd<\/span> examples\/configure\/\nwaf -x <span style=\"font-style: italic;\">'Persist This'<\/span> configure \n<span style=\"font-weight: bold;\">echo<\/span> <span style=\"font-style: italic;\">\"Configure done\"<\/span>\nwaf\n<\/pre>\n<\/div>\n\n<pre class=\"example\">\nSetting top to                           : \/home\/bv\/org-pub\/topics\/waf\/examples\/configure \nSetting out to                           : \/home\/bv\/org-pub\/topics\/waf\/examples\/configure\/build \n'configure' finished successfully (0.003s)\nConfigure done\nWaf: Entering directory `\/home\/bv\/org-pub\/topics\/waf\/examples\/configure\/build'\nThe little bit of extra is: \"Persist This\"\nWaf: Leaving directory `\/home\/bv\/org-pub\/topics\/waf\/examples\/configure\/build'\n'build' finished successfully (0.002s)\n<\/pre>\n<\/div>\n<\/div>\n\n<div id=\"outline-container-sec-3-3\" class=\"outline-3\">\n<h3 id=\"sec-3-3\"><span class=\"section-number-3\">3.3<\/span> Build<\/h3>\n<div class=\"outline-text-3\" id=\"text-3-3\">\n<p>\nIn the <code>build(bld)<\/code> function is where one describes to waf how to build everything.    It is passed a <a href=\"http:\/\/docs.waf.googlecode.com\/git\/apidocs_17\/Build.html\">build<\/a> context object.  There are several ways to do this but a simple and powerful way is to declare a task generator by calling <code>bld<\/code> as a callable object.\n<\/p>\n\n<div class=\"org-src-container\">\n\n<pre class=\"src src-python\"><span style=\"font-weight: bold;\">def<\/span> <span style=\"font-weight: bold;\">configure<\/span>(cfg):\n    <span style=\"font-weight: bold;\">return<\/span>\n\n<span style=\"font-weight: bold;\">def<\/span> <span style=\"font-weight: bold;\">build<\/span>(bld):\n    bld(rule=<span style=\"font-style: italic;\">\"date &gt; ${TGT}\"<\/span>, target = <span style=\"font-style: italic;\">\"one.txt\"<\/span>)\n    bld(rule=<span style=\"font-style: italic;\">\"cp ${SRC} ${TGT} &amp;&amp; date &gt;&gt; ${TGT}\"<\/span>, source=<span style=\"font-style: italic;\">\"one.txt\"<\/span>, target=<span style=\"font-style: italic;\">\"two.txt\"<\/span>)\n    bld.install_files(<span style=\"font-style: italic;\">\"${PREFIX}\/examples\"<\/span>, <span style=\"font-style: italic;\">\"one.txt two.txt\"<\/span>)\n<\/pre>\n<\/div>\n\n<div class=\"org-src-container\">\n\n<pre class=\"src src-sh\"><span style=\"font-weight: bold;\">cd<\/span> examples\/build\nrm -rf build install\nwaf --prefix=install configure build install\nls -l build\nls -l install\/examples\n<\/pre>\n<\/div>\n\n<pre class=\"example\">\nSetting top to                           : \/home\/bv\/org-pub\/topics\/waf\/examples\/build \nSetting out to                           : \/home\/bv\/org-pub\/topics\/waf\/examples\/build\/build \n'configure' finished successfully (0.003s)\nWaf: Entering directory `\/home\/bv\/org-pub\/topics\/waf\/examples\/build\/build'\n[1\/2] one.txt:  -&gt; build\/one.txt\n[2\/2] two.txt: build\/one.txt -&gt; build\/two.txt\nWaf: Leaving directory `\/home\/bv\/org-pub\/topics\/waf\/examples\/build\/build'\n'build' finished successfully (0.015s)\nWaf: Entering directory `\/home\/bv\/org-pub\/topics\/waf\/examples\/build\/build'\n+ install \/home\/bv\/org-pub\/topics\/waf\/examples\/build\/install\/examples\/one.txt (from build\/one.txt)\n+ install \/home\/bv\/org-pub\/topics\/waf\/examples\/build\/install\/examples\/two.txt (from build\/two.txt)\nWaf: Leaving directory `\/home\/bv\/org-pub\/topics\/waf\/examples\/build\/build'\n'install' finished successfully (0.005s)\ntotal 16\ndrwxr-xr-x 2 bv bv 4096 Mar  1 19:10 c4che\n-rw-r--r-- 1 bv bv  376 Mar  1 19:10 config.log\n-rw-r--r-- 1 bv bv   29 Mar  1 19:10 one.txt\n-rw-r--r-- 1 bv bv   58 Mar  1 19:10 two.txt\ntotal 8\n-rw-r--r-- 1 bv bv 29 Mar  1 19:10 one.txt\n-rw-r--r-- 1 bv bv 58 Mar  1 19:10 two.txt\n<\/pre>\n\n<p>\nIn this example two files are created, <code>one.txt<\/code> out of thin air and <code>two.txt<\/code> based on <code>one.txt<\/code>.  Both of these files are then installed into a location based on the value of <code>PREFIX<\/code> which is set by the standard waf <code>--prefix<\/code> command line option.  A task is generated for each invocation of <code>bld()<\/code> as set by the <code>rule<\/code>.  Here the rule is a <a href=\"http:\/\/docs.waf.googlecode.com\/git\/book_16\/single.html#_scriptlet_expressions\">scriptlet<\/a> which is essentially a shell script command with some string interpolation.  As can be seen, file redirection and other shell operators can be used.\n<\/p>\n<\/div>\n<\/div>\n<\/div>\n","tree":["org-data",null,["section",{"begin":1,"end":1740,"contents-begin":1,"contents-end":1739,"post-blank":1,"parent":"none"},["keyword",{"key":"TITLE","value":"Building with waf","begin":1,"end":28,"post-blank":0,"post-affiliated":1,"parent":"none"}],["keyword",{"key":"DATE","value":"[2014-03-01 Sat 09:56]","begin":28,"end":59,"post-blank":0,"post-affiliated":28,"parent":"none"}],["keyword",{"key":"DESCRIPTION","value":"Making a better build system with waf.","begin":59,"end":113,"post-blank":0,"post-affiliated":59,"parent":"none"}],["keyword",{"key":"SUBTITLE","value":"Making a better build system with waf.","begin":113,"end":164,"post-blank":0,"post-affiliated":113,"parent":"none"}],["keyword",{"key":"CATEGORY","value":"Build","begin":164,"end":182,"post-blank":0,"post-affiliated":164,"parent":"none"}],["keyword",{"key":"TAGS","value":"overview,waf","begin":182,"end":203,"post-blank":0,"post-affiliated":182,"parent":"none"}],["keyword",{"key":"SETUPFILE","value":"~\/org-pub\/topics\/setup.org","begin":203,"end":245,"post-blank":2,"post-affiliated":203,"parent":"none"}],["paragraph",{"begin":245,"end":743,"contents-begin":245,"contents-end":742,"post-blank":1,"post-affiliated":245,"parent":"none"},"The venerable workhorse of building software has long been ",["link",{"type":"https","path":"\/\/www.gnu.org\/software\/make\/","raw-link":"https:\/\/www.gnu.org\/software\/make\/","application":null,"search-option":null,"begin":304,"end":351,"contents-begin":342,"contents-end":348,"post-blank":1,"parent":"none"},["verbatim",{"value":"make","begin":342,"end":348,"post-blank":0,"parent":"none"}]],"driven by its quirky and sometimes cryptic ",["verbatim",{"value":"Makefile","begin":394,"end":405,"post-blank":1,"parent":"none"}],"configurations.  Anytime I must write even a moderately complex build system based on ",["verbatim",{"value":"make","begin":491,"end":498,"post-blank":1,"parent":"none"}],"I dream of having a simple, consistent and real programming language to describe the configuration instead of the language of a ",["verbatim",{"value":"Makefile","begin":626,"end":636,"post-blank":0,"parent":"none"}],".  Lacking it, when I use ",["verbatim",{"value":"make","begin":662,"end":669,"post-blank":1,"parent":"none"}],"I end up relying on a zoo of external tools which leads to a hodgepodge.\n"],["paragraph",{"begin":743,"end":1116,"contents-begin":743,"contents-end":1115,"post-blank":1,"post-affiliated":743,"parent":"none"},"At some point I came across ",["link",{"type":"http","path":"\/\/www.scons.org\/","raw-link":"http:\/\/www.scons.org\/","application":null,"search-option":null,"begin":771,"end":806,"contents-begin":796,"contents-end":803,"post-blank":1,"parent":"none"},["verbatim",{"value":"scons","begin":796,"end":803,"post-blank":0,"parent":"none"}]],"and thought my wishes were answered.  It uses the lovely Python programming language so must be perfect. Unfortunately as I tried to use it I found a few problems and personal dislikes.  It was difficult to extend and I found the built-in functionality awkward.  These are admittedly very personal judgments.\n"],["paragraph",{"begin":1116,"end":1739,"contents-begin":1116,"contents-end":1739,"post-blank":0,"post-affiliated":1116,"parent":"none"},"More recently I came across ",["link",{"type":"https","path":"\/\/code.google.com\/p\/waf\/","raw-link":"https:\/\/code.google.com\/p\/waf\/","application":null,"search-option":null,"begin":1144,"end":1186,"contents-begin":1178,"contents-end":1183,"post-blank":1,"parent":"none"},["verbatim",{"value":"waf","begin":1178,"end":1183,"post-blank":0,"parent":"none"}]],"and found it just about exactly what I was looking for.  It uses Python, it can be extended easily (it forms the basis of my meta-build system ",["link",{"type":"https","path":"\/\/github.com\/brettviren\/worch","raw-link":"https:\/\/github.com\/brettviren\/worch","application":null,"search-option":null,"begin":1329,"end":1375,"contents-begin":1368,"contents-end":1373,"post-blank":0,"parent":"none"},"worch"],").  It has good, if not great ",["link",{"type":"http","path":"\/\/docs.waf.googlecode.com\/git\/","raw-link":"http:\/\/docs.waf.googlecode.com\/git\/","application":null,"search-option":null,"begin":1405,"end":1459,"contents-begin":1444,"contents-end":1457,"post-blank":0,"parent":"none"},"documentation"],".  This latter issue is what this topic is meant to address.  It is written to collect my understanding as a user of waf and hopefully fill a needed gap.  It tries to provide concrete examples of how to do various things and refer to the official documentation wherever possible.\n"]],["headline",{"raw-value":"Gestalt of waf","begin":1740,"end":2500,"pre-blank":1,"hiddenp":"outline","contents-begin":1758,"contents-end":2498,"level":1,"priority":null,"tags":null,"todo-keyword":null,"todo-type":null,"post-blank":2,"footnote-section-p":null,"archivedp":null,"commentedp":null,"quotedp":null,"CATEGORY":"Build","title":["Gestalt of waf"],"parent":"none"},["section",{"begin":1758,"end":2500,"contents-begin":1758,"contents-end":2498,"post-blank":2,"parent":"none"},["paragraph",{"begin":1758,"end":1872,"contents-begin":1758,"contents-end":1871,"post-blank":1,"post-affiliated":1758,"parent":"none"},"Waf is like ",["verbatim",{"value":"make","begin":1770,"end":1777,"post-blank":1,"parent":"none"}],"but with a ",["verbatim",{"value":"Makefile","begin":1788,"end":1799,"post-blank":1,"parent":"none"}],"called ",["verbatim",{"value":"wscript","begin":1806,"end":1816,"post-blank":1,"parent":"none"}],"and written in Python.  Waf is unlike in several ways:\n"],["plain-list",{"type":"unordered","begin":1872,"end":2498,"contents-begin":1872,"contents-end":2498,"structure":"none","post-blank":0,"post-affiliated":1872,"parent":"none"},["item",{"bullet":"- ","begin":1872,"end":2043,"contents-begin":1874,"contents-end":2042,"checkbox":null,"counter":null,"hiddenp":"outline","structure":"none","post-blank":1,"tag":null,"parent":"none"},["paragraph",{"begin":1874,"end":2042,"contents-begin":1874,"contents-end":2042,"post-blank":0,"post-affiliated":1874,"parent":"none"},"waf can be ",["link",{"type":"http","path":"\/\/docs.waf.googlecode.com\/git\/book_17\/single.html#_writing_re_usable_waf_tools","raw-link":"http:\/\/docs.waf.googlecode.com\/git\/book_17\/single.html#_writing_re_usable_waf_tools","application":null,"search-option":null,"begin":1885,"end":1983,"contents-begin":1972,"contents-end":1980,"post-blank":1,"parent":"none"},"extended"],"by providing Python modules loaded through ",["verbatim",{"value":"wscript","begin":2026,"end":2036,"post-blank":1,"parent":"none"}],"files\n"]],["item",{"bullet":"- ","begin":2043,"end":2231,"contents-begin":2045,"contents-end":2230,"checkbox":null,"counter":null,"hiddenp":"outline","structure":"none","post-blank":1,"tag":null,"parent":"none"},["paragraph",{"begin":2045,"end":2230,"contents-begin":2045,"contents-end":2230,"post-blank":0,"post-affiliated":2045,"parent":"none"},"waf can be ",["link",{"type":"http","path":"\/\/docs.waf.googlecode.com\/git\/book_17\/single.html#_obtaining_the_waf_file","raw-link":"http:\/\/docs.waf.googlecode.com\/git\/book_17\/single.html#_obtaining_the_waf_file","application":null,"search-option":null,"begin":2056,"end":2148,"contents-begin":2138,"contents-end":2145,"post-blank":1,"parent":"none"},"bundled"],"along with extensions to provide a single executable that performs specific tasks\n"]],["item",{"bullet":"- ","begin":2231,"end":2349,"contents-begin":2233,"contents-end":2348,"checkbox":null,"counter":null,"hiddenp":"outline","structure":"none","post-blank":1,"tag":null,"parent":"none"},["paragraph",{"begin":2233,"end":2348,"contents-begin":2233,"contents-end":2348,"post-blank":0,"post-affiliated":2233,"parent":"none"},"waf is cross-platform, no compilation needed and can be included as a single file along with the project it builds\n"]],["item",{"bullet":"- ","begin":2349,"end":2498,"contents-begin":2351,"contents-end":2498,"checkbox":null,"counter":null,"hiddenp":null,"structure":"none","post-blank":0,"tag":null,"parent":"none"},["paragraph",{"begin":2351,"end":2498,"contents-begin":2351,"contents-end":2498,"post-blank":0,"post-affiliated":2351,"parent":"none"},"waf is parallel by default, it will run tasks as parallel as possible constrained by available CPU, dependencies or any limits imposed by the user\n"]]]]],["headline",{"raw-value":"The waf configuration file","begin":2500,"end":3497,"pre-blank":1,"hiddenp":"outline","contents-begin":2530,"contents-end":3496,"level":1,"priority":null,"tags":null,"todo-keyword":null,"todo-type":null,"post-blank":1,"footnote-section-p":null,"archivedp":null,"commentedp":null,"quotedp":null,"CATEGORY":"Build","title":["The waf configuration file"],"parent":"none"},["section",{"begin":2530,"end":2603,"contents-begin":2530,"contents-end":2602,"post-blank":1,"parent":"none"},["paragraph",{"begin":2530,"end":2602,"contents-begin":2530,"contents-end":2602,"post-blank":0,"post-affiliated":2530,"parent":"none"},"Waf expects to find a file called ",["verbatim",{"value":"wscript","begin":2564,"end":2574,"post-blank":1,"parent":"none"}],"in the current directory.  \n"]],["headline",{"raw-value":"Commands","begin":2603,"end":3018,"pre-blank":1,"hiddenp":"outline","contents-begin":2616,"contents-end":3016,"level":2,"priority":null,"tags":null,"todo-keyword":null,"todo-type":null,"post-blank":2,"footnote-section-p":null,"archivedp":null,"commentedp":null,"quotedp":null,"CATEGORY":"Build","title":["Commands"],"parent":"none"},["section",{"begin":2616,"end":3018,"contents-begin":2616,"contents-end":3016,"post-blank":2,"parent":"none"},["paragraph",{"begin":2616,"end":2707,"contents-begin":2616,"contents-end":2706,"post-blank":1,"post-affiliated":2616,"parent":"none"},"Functions in this file become exposed through waf as command line commands.  For example:\n"],["keyword",{"key":"INCLUDE","value":"\"examples\/commands\/wscript\" src python","begin":2707,"end":2758,"post-blank":1,"post-affiliated":2707,"parent":"none"}],["paragraph",{"begin":2758,"end":2780,"contents-begin":2758,"contents-end":2779,"post-blank":1,"post-affiliated":2758,"parent":"none"},"can be exercised as:\n"],["src-block",{"language":"sh","switches":null,"parameters":":results value code :exports both :wrap EXAMPLE","begin":2780,"end":2891,"number-lines":null,"preserve-indent":null,"retain-labels":true,"use-labels":true,"label-fmt":null,"hiddenp":"outline","value":"cd examples\/commands\/\nwaf chirp\n","post-blank":1,"post-affiliated":2780,"parent":"none"}],["example-block",{"begin":2891,"end":3016,"value":"<waflib.Context.Context object at 0x28c0090>\n'chirp' finished successfully (0.000s)\n","switches":null,"number-lines":null,"preserve-indent":null,"retain-labels":true,"use-labels":true,"label-fmt":null,"hiddenp":"outline","post-blank":0,"post-affiliated":2902,"results":[""],"parent":"none"}]]],["headline",{"raw-value":"Context object","begin":3018,"end":3496,"pre-blank":1,"hiddenp":"outline","contents-begin":3037,"contents-end":3496,"level":2,"priority":null,"tags":null,"todo-keyword":null,"todo-type":null,"post-blank":0,"footnote-section-p":null,"archivedp":null,"commentedp":null,"quotedp":null,"CATEGORY":"Build","title":["Context object"],"parent":"none"},["section",{"begin":3037,"end":3497,"contents-begin":3037,"contents-end":3496,"post-blank":1,"parent":"none"},["paragraph",{"begin":3037,"end":3294,"contents-begin":3037,"contents-end":3293,"post-blank":1,"post-affiliated":3037,"parent":"none"},"A waf command function is given a context object.  This context object may be specialized depending on the function called.  The figure from the  ",["link",{"type":"http","path":"\/\/docs.waf.googlecode.com\/git\/apidocs_17\/Context.html","raw-link":"http:\/\/docs.waf.googlecode.com\/git\/apidocs_17\/Context.html","application":null,"search-option":null,"begin":3183,"end":3270,"contents-begin":3245,"contents-end":3267,"post-blank":1,"parent":"none"},"context reference docs"],"shows the inheritance:\n"],["paragraph",{"begin":3294,"end":3496,"contents-begin":3466,"contents-end":3496,"post-blank":0,"post-affiliated":3466,"caption":[{"Inheritance of context classes.  Note, the arrows are reversed from the sense they would be drawn in a UML inheritance diagram.":null}],"name":"fig:context-inheritance","parent":"none"},["link",{"type":"file","path":".\/context-inheritance.png","raw-link":".\/context-inheritance.png","application":null,"search-option":null,"begin":3466,"end":3495,"contents-begin":null,"contents-end":null,"post-blank":0,"parent":"none"}],"\n"]]]],["headline",{"raw-value":"Predefined commands","begin":3497,"end":7448,"pre-blank":1,"hiddenp":"outline","contents-begin":3520,"contents-end":7448,"level":1,"priority":null,"tags":null,"todo-keyword":null,"todo-type":null,"post-blank":0,"footnote-section-p":null,"archivedp":null,"commentedp":null,"quotedp":null,"CATEGORY":"Build","title":["Predefined commands"],"parent":"none"},["section",{"begin":3520,"end":3579,"contents-begin":3520,"contents-end":3578,"post-blank":1,"parent":"none"},["paragraph",{"begin":3520,"end":3578,"contents-begin":3520,"contents-end":3578,"post-blank":0,"post-affiliated":3520,"parent":"none"},"Certain commands are reserved and treated special by waf.\n"]],["headline",{"raw-value":"Options","begin":3579,"end":4031,"pre-blank":1,"hiddenp":"outline","contents-begin":3591,"contents-end":4030,"level":2,"priority":null,"tags":null,"todo-keyword":null,"todo-type":null,"post-blank":1,"footnote-section-p":null,"archivedp":null,"commentedp":null,"quotedp":null,"CATEGORY":"Build","title":["Options"],"parent":"none"},["section",{"begin":3591,"end":4031,"contents-begin":3591,"contents-end":4030,"post-blank":1,"parent":"none"},["paragraph",{"begin":3591,"end":3834,"contents-begin":3591,"contents-end":3833,"post-blank":1,"post-affiliated":3591,"parent":"none"},"The ",["verbatim",{"value":"options(ctx)","begin":3595,"end":3610,"post-blank":1,"parent":"none"}],"function will be passed an ",["link",{"type":"http","path":"\/\/docs.waf.googlecode.com\/git\/apidocs_17\/Options.html","raw-link":"http:\/\/docs.waf.googlecode.com\/git\/apidocs_17\/Options.html","application":null,"search-option":null,"begin":3637,"end":3709,"contents-begin":3699,"contents-end":3706,"post-blank":1,"parent":"none"},"options"],"context object.  This function can be used to define command line options that waf will recognize on behalf of the project.\n"],["keyword",{"key":"INCLUDE","value":"\"examples\/options\/wscript\" src python","begin":3834,"end":3884,"post-blank":1,"post-affiliated":3834,"parent":"none"}],["src-block",{"language":"sh","switches":null,"parameters":":results value code :exports both :wrap EXAMPLE","begin":3884,"end":4030,"number-lines":null,"preserve-indent":null,"retain-labels":true,"use-labels":true,"label-fmt":null,"hiddenp":"outline","value":"cd examples\/options\/\nwaf --extra='Just a bit of extra stuff' chirp\n","post-blank":0,"post-affiliated":3884,"parent":"none"}]]],["headline",{"raw-value":"Configure","begin":4031,"end":5072,"pre-blank":1,"hiddenp":"outline","contents-begin":4045,"contents-end":5071,"level":2,"priority":null,"tags":null,"todo-keyword":null,"todo-type":null,"post-blank":1,"footnote-section-p":null,"archivedp":null,"commentedp":null,"quotedp":null,"CATEGORY":"Build","title":["Configure"],"parent":"none"},["section",{"begin":4045,"end":5072,"contents-begin":4045,"contents-end":5071,"post-blank":1,"parent":"none"},["paragraph",{"begin":4045,"end":4327,"contents-begin":4045,"contents-end":4326,"post-blank":1,"post-affiliated":4045,"parent":"none"},"The ",["verbatim",{"value":"configure(cfg)","begin":4049,"end":4066,"post-blank":1,"parent":"none"}],"function is passed a ",["link",{"type":"http","path":"\/\/docs.waf.googlecode.com\/git\/apidocs_17\/Configure.html","raw-link":"http:\/\/docs.waf.googlecode.com\/git\/apidocs_17\/Configure.html","application":null,"search-option":null,"begin":4087,"end":4167,"contents-begin":4151,"contents-end":4164,"post-blank":1,"parent":"none"},"configuration"],"context object.  This function can be used to persist any information between other command calls.  On possible use is to make command line options persisted.\n"],["keyword",{"key":"INCLUDE","value":"\"examples\/configure\/wscript\" src python","begin":4327,"end":4379,"post-blank":1,"post-affiliated":4327,"parent":"none"}],["src-block",{"language":"sh","switches":null,"parameters":":results value code :exports both :wrap EXAMPLE","begin":4379,"end":4545,"number-lines":null,"preserve-indent":null,"retain-labels":true,"use-labels":true,"label-fmt":null,"hiddenp":"outline","value":"cd examples\/configure\/\nwaf -x 'Persist This' configure \necho \"Configure done\"\nwaf\n","post-blank":1,"post-affiliated":4379,"parent":"none"}],["example-block",{"begin":4545,"end":5071,"value":"Setting top to                           : \/home\/bv\/org-pub\/topics\/waf\/examples\/configure \nSetting out to                           : \/home\/bv\/org-pub\/topics\/waf\/examples\/configure\/build \n'configure' finished successfully (0.003s)\nConfigure done\nWaf: Entering directory `\/home\/bv\/org-pub\/topics\/waf\/examples\/configure\/build'\nThe little bit of extra is: \"Persist This\"\nWaf: Leaving directory `\/home\/bv\/org-pub\/topics\/waf\/examples\/configure\/build'\n'build' finished successfully (0.002s)\n","switches":null,"number-lines":null,"preserve-indent":null,"retain-labels":true,"use-labels":true,"label-fmt":null,"hiddenp":"outline","post-blank":0,"post-affiliated":4556,"results":[""],"parent":"none"}]]],["headline",{"raw-value":"Build","begin":5072,"end":7448,"pre-blank":1,"hiddenp":"outline","contents-begin":5082,"contents-end":7448,"level":2,"priority":null,"tags":null,"todo-keyword":null,"todo-type":null,"post-blank":0,"footnote-section-p":null,"archivedp":null,"commentedp":null,"quotedp":null,"CATEGORY":null,"title":["Build"],"parent":"none"},["section",{"begin":5082,"end":7448,"contents-begin":5082,"contents-end":7448,"post-blank":0,"parent":"none"},["paragraph",{"begin":5082,"end":5404,"contents-begin":5082,"contents-end":5403,"post-blank":1,"post-affiliated":5082,"parent":"none"},"In the ",["verbatim",{"value":"build(bld)","begin":5089,"end":5102,"post-blank":1,"parent":"none"}],"function is where one describes to waf how to build everything.    It is passed a ",["link",{"type":"http","path":"\/\/docs.waf.googlecode.com\/git\/apidocs_17\/Build.html","raw-link":"http:\/\/docs.waf.googlecode.com\/git\/apidocs_17\/Build.html","application":null,"search-option":null,"begin":5184,"end":5252,"contents-begin":5244,"contents-end":5249,"post-blank":1,"parent":"none"},"build"],"context object.  There are several ways to do this but a simple and powerful way is to declare a task generator by calling ",["verbatim",{"value":"bld","begin":5375,"end":5381,"post-blank":1,"parent":"none"}],"as a callable object.\n"],["keyword",{"key":"INCLUDE","value":"\"examples\/build\/wscript\" src python","begin":5404,"end":5452,"post-blank":1,"post-affiliated":5404,"parent":"none"}],["src-block",{"language":"sh","switches":null,"parameters":":results value code :exports both :wrap EXAMPLE","begin":5452,"end":5657,"number-lines":null,"preserve-indent":null,"retain-labels":true,"use-labels":true,"label-fmt":null,"hiddenp":"outline","value":"cd examples\/build\nrm -rf build install\nwaf --prefix=install configure build install\nls -l build\nls -l install\/examples\n","post-blank":1,"post-affiliated":5452,"parent":"none"}],["example-block",{"begin":5657,"end":6861,"value":"Setting top to                           : \/home\/bv\/org-pub\/topics\/waf\/examples\/build \nSetting out to                           : \/home\/bv\/org-pub\/topics\/waf\/examples\/build\/build \n'configure' finished successfully (0.003s)\nWaf: Entering directory `\/home\/bv\/org-pub\/topics\/waf\/examples\/build\/build'\n[1\/2] one.txt:  -> build\/one.txt\n[2\/2] two.txt: build\/one.txt -> build\/two.txt\nWaf: Leaving directory `\/home\/bv\/org-pub\/topics\/waf\/examples\/build\/build'\n'build' finished successfully (0.015s)\nWaf: Entering directory `\/home\/bv\/org-pub\/topics\/waf\/examples\/build\/build'\n+ install \/home\/bv\/org-pub\/topics\/waf\/examples\/build\/install\/examples\/one.txt (from build\/one.txt)\n+ install \/home\/bv\/org-pub\/topics\/waf\/examples\/build\/install\/examples\/two.txt (from build\/two.txt)\nWaf: Leaving directory `\/home\/bv\/org-pub\/topics\/waf\/examples\/build\/build'\n'install' finished successfully (0.005s)\ntotal 16\ndrwxr-xr-x 2 bv bv 4096 Mar  1 19:10 c4che\n-rw-r--r-- 1 bv bv  376 Mar  1 19:10 config.log\n-rw-r--r-- 1 bv bv   29 Mar  1 19:10 one.txt\n-rw-r--r-- 1 bv bv   58 Mar  1 19:10 two.txt\ntotal 8\n-rw-r--r-- 1 bv bv 29 Mar  1 19:10 one.txt\n-rw-r--r-- 1 bv bv 58 Mar  1 19:10 two.txt\n","switches":null,"number-lines":null,"preserve-indent":null,"retain-labels":true,"use-labels":true,"label-fmt":null,"hiddenp":"outline","post-blank":1,"post-affiliated":5668,"results":[""],"parent":"none"}],["paragraph",{"begin":6861,"end":7448,"contents-begin":6861,"contents-end":7448,"post-blank":0,"post-affiliated":6861,"parent":"none"},"In this example two files are created, ",["verbatim",{"value":"one.txt","begin":6900,"end":6910,"post-blank":1,"parent":"none"}],"out of thin air and ",["verbatim",{"value":"two.txt","begin":6930,"end":6940,"post-blank":1,"parent":"none"}],"based on ",["verbatim",{"value":"one.txt","begin":6949,"end":6958,"post-blank":0,"parent":"none"}],".  Both of these files are then installed into a location based on the value of ",["verbatim",{"value":"PREFIX","begin":7038,"end":7047,"post-blank":1,"parent":"none"}],"which is set by the standard waf ",["verbatim",{"value":"--prefix","begin":7080,"end":7091,"post-blank":1,"parent":"none"}],"command line option.  A task is generated for each invocation of ",["verbatim",{"value":"bld()","begin":7156,"end":7164,"post-blank":1,"parent":"none"}],"as set by the ",["verbatim",{"value":"rule","begin":7178,"end":7184,"post-blank":0,"parent":"none"}],".  Here the rule is a ",["link",{"type":"http","path":"\/\/docs.waf.googlecode.com\/git\/book_16\/single.html#_scriptlet_expressions","raw-link":"http:\/\/docs.waf.googlecode.com\/git\/book_16\/single.html#_scriptlet_expressions","application":null,"search-option":null,"begin":7206,"end":7299,"contents-begin":7287,"contents-end":7296,"post-blank":1,"parent":"none"},"scriptlet"],"which is essentially a shell script command with some string interpolation.  As can be seen, file redirection and other shell operators can be used.\n"]]]]]}