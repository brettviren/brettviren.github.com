<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<title>Managing a LArSoft Development Environment with Google Repo</title>
<!-- 2014-07-26 Sat 11:23 -->
<meta  http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta  name="generator" content="Org-mode" />
<meta  name="author" content="Brett Viren" />
<meta  name="description" content="Google =repo= can be used to manage a development environment and to build the code."
 />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center; }
  .todo   { font-family: monospace; color: red; }
  .done   { color: green; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  pre.src-sh:before    { content: 'sh'; }
  pre.src-bash:before  { content: 'sh'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-R:before     { content: 'R'; }
  pre.src-perl:before  { content: 'Perl'; }
  pre.src-java:before  { content: 'Java'; }
  pre.src-sql:before   { content: 'SQL'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.right  { text-align: center;  }
  th.left   { text-align: center;   }
  th.center { text-align: center; }
  td.right  { text-align: right;  }
  td.left   { text-align: left;   }
  td.center { text-align: center; }
  dt { font-weight: bold; }
  .footpara:nth-child(2) { display: inline; }
  .footpara { display: block; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  /*]]>*/-->
</style>
<script src="http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.0/jquery.min.js" type="text/javascript"></script>
<link rel="stylesheet" type="text/css" href="../../css/style.css" />
<script type="text/javascript" src="../../js/functions.js"></script>

<script type="text/javascript" src="http://orgmode.org/org-info.js">
/**
 *
 * @source: http://orgmode.org/org-info.js
 *
 * @licstart  The following is the entire license notice for the
 *  JavaScript code in http://orgmode.org/org-info.js.
 *
 * Copyright (C) 2012-2013 Free Software Foundation, Inc.
 *
 *
 * The JavaScript code in this tag is free software: you can
 * redistribute it and/or modify it under the terms of the GNU
 * General Public License (GNU GPL) as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option)
 * any later version.  The code is distributed WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.
 *
 * As additional permission under GNU GPL version 3 section 7, you
 * may distribute non-source (e.g., minimized or compacted) forms of
 * that code without the copy of the GNU GPL normally required by
 * section 4, provided you include this license notice and a URL
 * through which recipients can access the Corresponding Source.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in http://orgmode.org/org-info.js.
 *
 */
</script>

<script type="text/javascript">

/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2013 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/

<!--/*--><![CDATA[/*><!--*/
org_html_manager.set("TOC_DEPTH", "3");
org_html_manager.set("LINK_HOME", "");
org_html_manager.set("LINK_UP", "../sitemap.html");
org_html_manager.set("LOCAL_TOC", "above");
org_html_manager.set("VIEW_BUTTONS", "0");
org_html_manager.set("MOUSE_HINT", "#cccccc");
org_html_manager.set("FIXED_TOC", "0");
org_html_manager.set("TOC", "1");
org_html_manager.set("VIEW", "showall");
org_html_manager.setup();  // activate after the parameters are set
/*]]>*///-->
</script>
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2013 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../sitemap.html"> UP </a>
 |
 <a accesskey="H" href=""> HOME </a>
</div><div id="content">
<h1 class="title">Managing a LArSoft Development Environment with Google Repo</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Manual Setup</a>
<ul>
<li><a href="#sec-1-1">1.1. Preliminaries</a></li>
<li><a href="#sec-1-2">1.2. Source</a></li>
<li><a href="#sec-1-3">1.3. Undoing a version lie</a></li>
<li><a href="#sec-1-4">1.4. Set up environment for building</a></li>
<li><a href="#sec-1-5">1.5. Build the package</a>
<ul>
<li><a href="#sec-1-5-1">1.5.1. Using the build directly</a></li>
</ul>
</li>
<li><a href="#sec-1-6">1.6. Install the package</a>
<ul>
<li><a href="#sec-1-6-1">1.6.1. Using the development UPS products area</a></li>
<li><a href="#sec-1-6-2">1.6.2. Rebuilding and using</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<p>
This topic describes how to set up a development environment for modifying LArSoft code or developing packages built on top of LArSoft.  The methods here do not make use of "<code>mrb</code>" but do rely on a "Fermilab compatible" UPS products area which provide the packages satisfying any dependencies any of the development packages require.
</p>

<p>
The development area consists of these directories:
</p>

<dl class="org-dl">
<dt> <code>source/</code> </dt><dd>a directory where all repositories are cloned
</dd>
<dt> <code>build/</code> </dt><dd>a directory from where building the source is done
</dd>
<dt> <code>install/</code> </dt><dd>a directory where the built binaries are placed
</dd>
</dl>

<p>
Each of these directories are independent from each other and may be placed where convenient.   Their contents are managed by the various steps as described below.  In the examples below, the use of these as relative directory paths indicate you should use whatever path locates them.  Where an absolute path is required, the absolute path <code>/path/to</code> will be prepended.  For example:
</p>

<pre class="example">
$ cd source/
$ cd /path/to/build
</pre>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Manual Setup</h2>
<div class="outline-text-2" id="text-1">
<p>
This section describes how to produce a development environment for a single package, "lbnecode"  a manual manner.  It uses as low-level methods as reasonable but stops before exposing the user to the morass of the underlying UPS/CMake build system.
</p>
</div>

<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> Preliminaries</h3>
<div class="outline-text-3" id="text-1-1">
<p>
Make the three areas, here assuming they are all next to each other:
</p>

<pre class="example">
$ mkdir source build install
</pre>

<p>
The <code>install/</code> directory will need to be primed with some UPS files which can be copied from the central UPS "products" area for the site.  This example assume you are using BNL's RACF.
</p>

<pre class="example">
$ cp -a /afs/rhic.bnl.gov/lbne/software/products/.up[sd]files install/
</pre>
</div>
</div>
<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> Source</h3>
<div class="outline-text-3" id="text-1-2">
<p>
Clone the package repository into the source area
</p>

<pre class="example">
$ cd source/
$ git clone http://cdcvs.fnal.gov/projects/lbnecode
</pre>

<p>
Note, this URL allows anonymous cloning of the repository but does not allow any commits that you may make to be pushed.  Later, if desired, you can add an additional remote that allows pushes so any commits you may make can be shared.
</p>

<p>
From this clone, decide which tag or branch to start with.  If you don't know what is available you can query the repository like:
</p>

<pre class="example">
$ cd source/lbnecode/
$ git tag
$ git branch -a
$ gitk --all
</pre>

<p>
A likely starting point is either the "master" or "develop" branch or some tag. If you intend to have other people use your modifications then starting from "master" is wise as it will make future merging easier than if you start from an older tag.  However, if you want to explicitly modify the code from some past tagged release, of courses use that tag next.
</p>

<p>
Once a starting point is found use its label in place of "<code>&lt;branch-or-tag&gt;</code>" in the following "<code>checkout</code>" command.
</p>

<pre class="example">
$ git checkout -b feature/MYWORK &lt;branch-or-tag&gt;
</pre>

<p>
The "<code>feature/MYWORK</code>" follows the convention for holding development.  Pick a unique name for "<code>MYWORK</code>" that indicates the intent of the development.  It should be brief but evocative.  It need not include any identifier as to who will be doing the work as any commits to the branch will, as always, will be attributed to your identity.
</p>
</div>
</div>
<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3"><span class="section-number-3">1.3</span> Undoing a version lie</h3>
<div class="outline-text-3" id="text-1-3">
<p>
The build, which is described below, will result in a UPS "product" binary package holding files for any executable, library, include, etc produced by the build.  This package lays out its files in a pattern that includes a version string and this version string must be supplied to the UPS "<code>setup</code>" command by anyone who wishes to use these build outputs.
</p>

<p>
This version string is intended for release builds but it gets forced on you, the poor developer.  It will be set to whatever value was needed at the time of the last release build that occurred in the branch you decided to check out above.  Any modifications to the source past this release point will likely <b>not</b> modify this version and thus will create a lie.  When reporting any results produced from a package that is in development you must take care not to quote them as being due to the release but qualify that the release was the basis for the development modifications.
</p>

<p>
With those caveats appreciated, you ignore the rest of this section.  
</p>

<p>
To make plain that your development build is not a release you may modify the release string.  It is set here:
</p>

<pre class="example">
$ emacs source/lbnecode/ups/product_deps
</pre>

<p>
Look for a line beginning with "<code>parent</code>".  For example: 
</p>

<pre class="example">
parent lbnecode v02_03_01
</pre>

<p>
Modify this string to indicate the development.  For example, tack on an identifier that can be associated with the branch name you chose above.
</p>

<pre class="example">
parent lbnecode v02_03_01MYWORK
</pre>

<p>
The rest of the file can often be left untouched.  If the development requires a new direct dependency it may need to be added.  
</p>
</div>
</div>
<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4"><span class="section-number-3">1.4</span> Set up environment for building</h3>
<div class="outline-text-3" id="text-1-4">
<p>
Before any development is started and before the first build of the checked out code one has to provide a meticulously crafted environment for the brittle UPS/CMake-based build system to work.  This setup is site specific but in general it involves sourcing a shell script associated with a base UPS "products area" followed by sourcing one associated with the package being built.
</p>

<pre class="example">
$ source /afs/rhic.bnl.gov/lbne/software/products/setup
$ mkdir -p build/lbnecode
$ cd build/lbnecode
$ source /path/to/source/lbnecode/setup_for_development -p
...
env CC=gcc CXX=g++ FC=gfortran cmake -DCMAKE_INSTALL_PREFIX="/install/path" -DCMAKE_BUILD_TYPE=${CETPKG_TYPE} "${CETPKG_SOURCE}"
</pre>

<p>
The "<code>-p</code>" flag in the last source indicates a "profile" build variant is desired.  
</p>

<p>
Take note of the "<code>cmake</code>" command echoed by this second script as it will be used later.
In general, building with CMake is best done in a directory outside the source directory and specific to each package:
</p>

<p>
Also, take note of that this last sourced file will add files to your current working directory which is why it is important to run it from the directory where build outputs should go.
</p>
</div>
</div>
<div id="outline-container-sec-1-5" class="outline-3">
<h3 id="sec-1-5"><span class="section-number-3">1.5</span> Build the package</h3>
<div class="outline-text-3" id="text-1-5">
<p>
Next, issue that cmake command which was echoed by <code>setup_for_development</code>.  Take note to edit the absolute path for the install prefix to suit your desired layout.
</p>

<pre class="example">
$ cd build/lbnecode/
$ env CC=gcc CXX=g++ FC=gfortran cmake -DCMAKE_INSTALL_PREFIX="/path/to/install" -DCMAKE_BUILD_TYPE=${CETPKG_TYPE} "${CETPKG_SOURCE}"
$ make
</pre>
</div>

<div id="outline-container-sec-1-5-1" class="outline-4">
<h4 id="sec-1-5-1"><span class="section-number-4">1.5.1</span> Using the build directly</h4>
<div class="outline-text-4" id="text-1-5-1">
<p>
After the "<code>make</code>" the "lbnecode" package is built into the "<code>build/</code>" directory.  In sourcing the "<code>setup_for_development</code>" script your environment was munged in order to locate the basic OS-level outputs of this build including executable and library files.  However, application-level files may not be yet be found if their location depends on additional environment variables.  Some examples:
</p>

<dl class="org-dl">
<dt> FCL files </dt><dd>these are located through the environment variable "<code>FHICL_FILE_PATH</code>".  This variable may be defined already but may not explicitly contain any elements pointing in to the build area.  It may contain the relative paths "<code>.</code>" and "<code>./job</code>" which may find FCL files while you remain in the <code>build/lbnecode/</code> directory
</dd>
</dl>
</div>
</div>
</div>
<div id="outline-container-sec-1-6" class="outline-3">
<h3 id="sec-1-6"><span class="section-number-3">1.6</span> Install the package</h3>
<div class="outline-text-3" id="text-1-6">
<p>
The build products can be installed as a UPS "product" into the location specified by  the <code>CMAKE_INSTALL_PREFIX</code> directive to the <code>cmake</code> command with:
</p>

<pre class="example">
$ make install
</pre>

<p>
Note that you should observe the output of this command copying files into a location with a directory named with your modified version string as above.
</p>
</div>

<div id="outline-container-sec-1-6-1" class="outline-4">
<h4 id="sec-1-6-1"><span class="section-number-4">1.6.1</span> Using the development UPS products area</h4>
<div class="outline-text-4" id="text-1-6-1">
<p>
If the <code>install/</code> area was prepped as a UPS "products area" as above then you will now have your own products area that you or anyone who can access it may use.  Since it only contains the development packages you have built and relies on the packages from the central UPS products area one must set up the environment to tell UPS about both.  You do this by prepending your products area to the <code>PRODUCTS</code> environment variable:
</p>

<pre class="example">
$ export PRODUCTS=/path/to/install:$PRODUCTS
</pre>

<p>
This assumes you have already sourced the central site UPS "<code>setup</code>" script.
</p>

<p>
You can now see that your package is found by UPS, for example with:
</p>

<pre class="example">
$ ups list -aK+ | grep lbnecode | grep MYWORK
"lbnecode" "v02_03_01MYWORK" "Linux64bit+2.6-2.12" "e5:prof" ""
</pre>

<p>
Where "<code>MYWORK</code>" is the label you added to break the version lie as above.  To munge your environment to use this package do the usual dance:
</p>

<pre class="example">
$ setup lbnecode v02_03_01MYWORK -q e5:prof
</pre>

<p>
You can now examine, or example, "<code>$FHICL_FILE_PATH</code>" and determine that an absolute path into the "lbnecode" package in your personal UPS products area has been added.
</p>

<pre class="example">
$ echo $FHICL_FILE_PATH|tr ':' '\n'
.
./job
/path/to/install/lbnecode/v02_03_01manual-build/job
.
./job
# ...
</pre>

<p>
Why are the "<code>.</code>" and "<code>./job</code>" directories repeated?  Dunno, don't ask me, I didn't write this.
</p>
</div>
</div>
<div id="outline-container-sec-1-6-2" class="outline-4">
<h4 id="sec-1-6-2"><span class="section-number-4">1.6.2</span> Rebuilding and using</h4>
<div class="outline-text-4" id="text-1-6-2">
<p>
After the first build you are free to modify the source to the package, rebuild and test it in the usual developer's loop.  Keep in mind that if you want changes to be reflected in your personal UPS products area you need to "<code>make install</code>" and if you want to use changes after just a "<code>make</code>" you likely must run from inside the <code>build/lbnecode/</code> directory.
</p>
</div>
</div>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="date">Date: 2014-07-25</p>
<p class="author">Author: Brett Viren</p>
<p class="date">Created: 2014-07-26 Sat 11:23</p>
<p class="creator"><a href="http://www.gnu.org/software/emacs/">Emacs</a> 24.3.1 (<a href="http://orgmode.org">Org</a> mode 8.2.5a)</p>
<p class="validation"><a href="http://validator.w3.org/check?uri=referer">Validate</a></p>
</div>
</body>
</html>
