<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>They Call Me Brett</title><link href="http://brettviren.github.io/" rel="alternate"></link><link href="http://brettviren.github.io/feeds/build.atom.xml" rel="self"></link><id>http://brettviren.github.io/</id><updated>2015-03-01T00:00:00-05:00</updated><entry><title>Building with waf</title><link href="http://brettviren.github.io/waf" rel="alternate"></link><updated>2015-03-01T00:00:00-05:00</updated><author><name>Brett Viren</name></author><id>tag:brettviren.github.io,2014-03-01:waf</id><summary type="html">
&lt;p&gt;
The venerable workhorse of building software has long been &lt;a href="https://www.gnu.org/software/make/"&gt;&lt;code&gt;make&lt;/code&gt;&lt;/a&gt; driven by its quirky and sometimes cryptic &lt;code&gt;Makefile&lt;/code&gt; configurations.  Anytime I must write even a moderately complex build system based on &lt;code&gt;make&lt;/code&gt; I dream of having a simple, consistent and real programming language to describe the configuration instead of the language of a &lt;code&gt;Makefile&lt;/code&gt;.  Lacking it, when I use &lt;code&gt;make&lt;/code&gt; I end up relying on a zoo of external tools which leads to a hodgepodge.
&lt;/p&gt;
&lt;p&gt;
At some point I came across &lt;a href="http://www.scons.org/"&gt;&lt;code&gt;scons&lt;/code&gt;&lt;/a&gt; and thought my wishes were answered.  It uses the lovely Python programming language so must be perfect. Unfortunately as I tried to use it I found a few problems and personal dislikes.  It was difficult to extend and I found the built-in functionality awkward.  These are admittedly very personal judgments.
&lt;/p&gt;
&lt;p&gt;
More recently I came across &lt;a href="https://code.google.com/p/waf/"&gt;&lt;code&gt;waf&lt;/code&gt;&lt;/a&gt; and found it just about exactly what I was looking for.  It uses Python, it can be extended easily (it forms the basis of my meta-build system &lt;a href="https://github.com/brettviren/worch"&gt;worch&lt;/a&gt;).  It has good, if not great &lt;a href="http://docs.waf.googlecode.com/git/"&gt;documentation&lt;/a&gt;.  This latter issue is what this topic is meant to address.  It is written to collect my understanding as a user of waf and hopefully fill a needed gap.  It tries to provide concrete examples of how to do various things and refer to the official documentation wherever possible.
&lt;/p&gt;
&lt;div class="outline-2" id="outline-container-orgheadline1"&gt;
&lt;h2 id="orgheadline1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Gestalt of waf&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Waf is like &lt;code&gt;make&lt;/code&gt; but with a &lt;code&gt;Makefile&lt;/code&gt; called &lt;code&gt;wscript&lt;/code&gt; and written in Python.  Waf is unlike in several ways:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;waf can be &lt;a href="http://docs.waf.googlecode.com/git/book_17/single.html#_writing_re_usable_waf_tools"&gt;extended&lt;/a&gt; by providing Python modules loaded through &lt;code&gt;wscript&lt;/code&gt; files&lt;/li&gt;
&lt;li&gt;waf can be &lt;a href="http://docs.waf.googlecode.com/git/book_17/single.html#_obtaining_the_waf_file"&gt;bundled&lt;/a&gt; along with extensions to provide a single executable that performs specific tasks&lt;/li&gt;
&lt;li&gt;waf is cross-platform, no compilation needed and can be included as a single file along with the project it builds&lt;/li&gt;
&lt;li&gt;waf is parallel by default, it will run tasks as parallel as possible constrained by available CPU, dependencies or any limits imposed by the user&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2" id="outline-container-orgheadline4"&gt;
&lt;h2 id="orgheadline4"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; The waf configuration file&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Waf expects to find a file called &lt;code&gt;wscript&lt;/code&gt; in the current directory.  
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline2"&gt;
&lt;h3 id="orgheadline2"&gt;&lt;span class="section-number-3"&gt;2.1&lt;/span&gt; Commands&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;p&gt;
Functions in this file become exposed through waf as command line commands.  For example:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="font-weight: bold;"&gt;chirp&lt;/span&gt;(ctx):
    &lt;span style="font-weight: bold;"&gt;print&lt;/span&gt; (ctx)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
can be exercised as:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;&lt;span style="font-weight: bold;"&gt;cd&lt;/span&gt; examples/commands/
waf chirp
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class="example"&gt;
&amp;lt;waflib.Context.Context object at 0x28c0090&amp;gt;
'chirp' finished successfully (0.000s)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline3"&gt;
&lt;h3 id="orgheadline3"&gt;&lt;span class="section-number-3"&gt;2.2&lt;/span&gt; Context object&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-2"&gt;
&lt;p&gt;
A waf command function is given a context object.  This context object may be specialized depending on the function called.  The figure from the  &lt;a href="http://docs.waf.googlecode.com/git/apidocs_17/Context.html"&gt;context reference docs&lt;/a&gt; shows the inheritance:
&lt;/p&gt;
&lt;div class="figure" id="orgparagraph1"&gt;
&lt;p&gt;&lt;img alt="context-inheritance.png" src="./context-inheritance.png"/&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 1:&lt;/span&gt; Inheritance of context classes.  Note, the arrows are reversed from the sense they would be drawn in a UML inheritance diagram.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2" id="outline-container-orgheadline8"&gt;
&lt;h2 id="orgheadline8"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Predefined commands&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
Certain commands are reserved and treated special by waf.
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline5"&gt;
&lt;h3 id="orgheadline5"&gt;&lt;span class="section-number-3"&gt;3.1&lt;/span&gt; Options&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-1"&gt;
&lt;p&gt;
The &lt;code&gt;options(ctx)&lt;/code&gt; function will be passed an &lt;a href="http://docs.waf.googlecode.com/git/apidocs_17/Options.html"&gt;options&lt;/a&gt; context object.  This function can be used to define command line options that waf will recognize on behalf of the project.
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="font-weight: bold;"&gt;options&lt;/span&gt;(opt):
    opt.add_option(&lt;span style="font-style: italic;"&gt;'-x'&lt;/span&gt;,&lt;span style="font-style: italic;"&gt;'--extra'&lt;/span&gt;,action=&lt;span style="font-style: italic;"&gt;'store'&lt;/span&gt;, 
                   &lt;span style="font-weight: bold;"&gt;help&lt;/span&gt;=&lt;span style="font-style: italic;"&gt;'Add something extra from the command line'&lt;/span&gt;)

&lt;span style="font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="font-weight: bold;"&gt;chirp&lt;/span&gt;(ctx):
    &lt;span style="font-weight: bold;"&gt;print&lt;/span&gt; (&lt;span style="font-style: italic;"&gt;'The little bit of extra is: "%s"'&lt;/span&gt; % ctx.options.extra)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;&lt;span style="font-weight: bold;"&gt;cd&lt;/span&gt; examples/options/
waf --extra=&lt;span style="font-style: italic;"&gt;'Just a bit of extra stuff'&lt;/span&gt; chirp
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline6"&gt;
&lt;h3 id="orgheadline6"&gt;&lt;span class="section-number-3"&gt;3.2&lt;/span&gt; Configure&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-2"&gt;
&lt;p&gt;
The &lt;code&gt;configure(cfg)&lt;/code&gt; function is passed a &lt;a href="http://docs.waf.googlecode.com/git/apidocs_17/Configure.html"&gt;configuration&lt;/a&gt; context object.  This function can be used to persist any information between other command calls.  On possible use is to make command line options persisted.
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="font-weight: bold;"&gt;options&lt;/span&gt;(opt):
    opt.add_option(&lt;span style="font-style: italic;"&gt;'-x'&lt;/span&gt;,&lt;span style="font-style: italic;"&gt;'--extra'&lt;/span&gt;,action=&lt;span style="font-style: italic;"&gt;'store'&lt;/span&gt;, 
                   &lt;span style="font-weight: bold;"&gt;help&lt;/span&gt;=&lt;span style="font-style: italic;"&gt;'Add something extra from the command line'&lt;/span&gt;)

&lt;span style="font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="font-weight: bold;"&gt;configure&lt;/span&gt;(cfg):
    &lt;span style="font-weight: bold; font-style: italic;"&gt;cfg.env.EXTRA_MSG&lt;/span&gt; = &lt;span style="font-style: italic;"&gt;'The little bit of extra is: "%s"'&lt;/span&gt; % cfg.options.extra

&lt;span style="font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="font-weight: bold;"&gt;build&lt;/span&gt;(bld):
    &lt;span style="font-weight: bold;"&gt;print&lt;/span&gt; (bld.env.EXTRA_MSG)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;&lt;span style="font-weight: bold;"&gt;cd&lt;/span&gt; examples/configure/
waf -x &lt;span style="font-style: italic;"&gt;'Persist This'&lt;/span&gt; configure 
&lt;span style="font-weight: bold;"&gt;echo&lt;/span&gt; &lt;span style="font-style: italic;"&gt;"Configure done"&lt;/span&gt;
waf
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class="example"&gt;
Setting top to                           : /home/bv/org-pub/topics/waf/examples/configure 
Setting out to                           : /home/bv/org-pub/topics/waf/examples/configure/build 
'configure' finished successfully (0.003s)
Configure done
Waf: Entering directory `/home/bv/org-pub/topics/waf/examples/configure/build'
The little bit of extra is: "Persist This"
Waf: Leaving directory `/home/bv/org-pub/topics/waf/examples/configure/build'
'build' finished successfully (0.002s)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline7"&gt;
&lt;h3 id="orgheadline7"&gt;&lt;span class="section-number-3"&gt;3.3&lt;/span&gt; Build&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-3"&gt;
&lt;p&gt;
In the &lt;code&gt;build(bld)&lt;/code&gt; function is where one describes to waf how to build everything.    It is passed a &lt;a href="http://docs.waf.googlecode.com/git/apidocs_17/Build.html"&gt;build&lt;/a&gt; context object.  There are several ways to do this but a simple and powerful way is to declare a task generator by calling &lt;code&gt;bld&lt;/code&gt; as a callable object.
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="font-weight: bold;"&gt;configure&lt;/span&gt;(cfg):
    &lt;span style="font-weight: bold;"&gt;return&lt;/span&gt;

&lt;span style="font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="font-weight: bold;"&gt;build&lt;/span&gt;(bld):
    bld(rule=&lt;span style="font-style: italic;"&gt;"date &amp;gt; ${TGT}"&lt;/span&gt;, target = &lt;span style="font-style: italic;"&gt;"one.txt"&lt;/span&gt;)
    bld(rule=&lt;span style="font-style: italic;"&gt;"cp ${SRC} ${TGT} &amp;amp;&amp;amp; date &amp;gt;&amp;gt; ${TGT}"&lt;/span&gt;, source=&lt;span style="font-style: italic;"&gt;"one.txt"&lt;/span&gt;, target=&lt;span style="font-style: italic;"&gt;"two.txt"&lt;/span&gt;)
    bld.install_files(&lt;span style="font-style: italic;"&gt;"${PREFIX}/examples"&lt;/span&gt;, &lt;span style="font-style: italic;"&gt;"one.txt two.txt"&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;&lt;span style="font-weight: bold;"&gt;cd&lt;/span&gt; examples/build
rm -rf build install
waf --prefix=install configure build install
ls -l build
ls -l install/examples
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class="example"&gt;
Setting top to                           : /home/bv/org-pub/topics/waf/examples/build 
Setting out to                           : /home/bv/org-pub/topics/waf/examples/build/build 
'configure' finished successfully (0.003s)
Waf: Entering directory `/home/bv/org-pub/topics/waf/examples/build/build'
[1/2] one.txt:  -&amp;gt; build/one.txt
[2/2] two.txt: build/one.txt -&amp;gt; build/two.txt
Waf: Leaving directory `/home/bv/org-pub/topics/waf/examples/build/build'
'build' finished successfully (0.015s)
Waf: Entering directory `/home/bv/org-pub/topics/waf/examples/build/build'
+ install /home/bv/org-pub/topics/waf/examples/build/install/examples/one.txt (from build/one.txt)
+ install /home/bv/org-pub/topics/waf/examples/build/install/examples/two.txt (from build/two.txt)
Waf: Leaving directory `/home/bv/org-pub/topics/waf/examples/build/build'
'install' finished successfully (0.005s)
total 16
drwxr-xr-x 2 bv bv 4096 Mar  1 19:10 c4che
-rw-r--r-- 1 bv bv  376 Mar  1 19:10 config.log
-rw-r--r-- 1 bv bv   29 Mar  1 19:10 one.txt
-rw-r--r-- 1 bv bv   58 Mar  1 19:10 two.txt
total 8
-rw-r--r-- 1 bv bv 29 Mar  1 19:10 one.txt
-rw-r--r-- 1 bv bv 58 Mar  1 19:10 two.txt
&lt;/pre&gt;
&lt;p&gt;
In this example two files are created, &lt;code&gt;one.txt&lt;/code&gt; out of thin air and &lt;code&gt;two.txt&lt;/code&gt; based on &lt;code&gt;one.txt&lt;/code&gt;.  Both of these files are then installed into a location based on the value of &lt;code&gt;PREFIX&lt;/code&gt; which is set by the standard waf &lt;code&gt;--prefix&lt;/code&gt; command line option.  A task is generated for each invocation of &lt;code&gt;bld()&lt;/code&gt; as set by the &lt;code&gt;rule&lt;/code&gt;.  Here the rule is a &lt;a href="http://docs.waf.googlecode.com/git/book_16/single.html#_scriptlet_expressions"&gt;scriptlet&lt;/a&gt; which is essentially a shell script command with some string interpolation.  As can be seen, file redirection and other shell operators can be used.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="overview"></category><category term="waf"></category></entry></feed>