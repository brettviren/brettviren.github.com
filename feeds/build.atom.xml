<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>They Call Me Brett</title><link href="http://www.phy.bnl.gov/~bviren/" rel="alternate"></link><link href="http://www.phy.bnl.gov/~bviren/feeds/build.atom.xml" rel="self"></link><id>http://www.phy.bnl.gov/~bviren/</id><updated>2015-03-01T00:00:00-05:00</updated><entry><title>Building with waf</title><link href="http://www.phy.bnl.gov/~bviren/waf" rel="alternate"></link><updated>2015-03-01T00:00:00-05:00</updated><author><name>Brett Viren</name></author><id>tag:www.phy.bnl.gov,2015-03-01:~bviren/waf</id><summary type="html">
&lt;p&gt;
The venerable workhorse of building software has long been &lt;a href="https://www.gnu.org/software/make/"&gt;&lt;code&gt;make&lt;/code&gt;&lt;/a&gt; driven by its quirky and sometimes cryptic &lt;code&gt;Makefile&lt;/code&gt; configurations.  Anytime I must write even a moderately complex build system based on &lt;code&gt;make&lt;/code&gt; I dream of having a simple, consistent and real programming language to describe the configuration instead of the language of a &lt;code&gt;Makefile&lt;/code&gt;.  Lacking it, when I use &lt;code&gt;make&lt;/code&gt; I end up relying on a zoo of external tools which leads to a hodgepodge.
&lt;/p&gt;
&lt;p&gt;
At some point I came across &lt;a href="http://www.scons.org/"&gt;&lt;code&gt;scons&lt;/code&gt;&lt;/a&gt; and thought my wishes were answered.  It uses the lovely Python programming language so must be perfect. Unfortunately as I tried to use it I found a few problems and personal dislikes.  It was difficult to extend and I found the built-in functionality awkward.  These are admittedly very personal judgments.
&lt;/p&gt;
&lt;p&gt;
More recently I came across &lt;a href="https://code.google.com/p/waf/"&gt;&lt;code&gt;waf&lt;/code&gt;&lt;/a&gt; and found it just about exactly what I was looking for.  It uses Python, it can be extended easily (it forms the basis of my meta-build system &lt;a href="https://github.com/brettviren/worch"&gt;worch&lt;/a&gt;).  It has good, if not great &lt;a href="http://docs.waf.googlecode.com/git/"&gt;documentation&lt;/a&gt;.  This latter issue is what this topic is meant to address.  It is written to collect my understanding as a user of waf and hopefully fill a needed gap.  It tries to provide concrete examples of how to do various things and refer to the official documentation wherever possible.
&lt;/p&gt;
&lt;div class="outline-2" id="outline-container-sec-1"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Gestalt of waf&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Waf is like &lt;code&gt;make&lt;/code&gt; but with a &lt;code&gt;Makefile&lt;/code&gt; called &lt;code&gt;wscript&lt;/code&gt; and written in Python.  Waf is unlike in several ways:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;waf can be &lt;a href="http://docs.waf.googlecode.com/git/book_17/single.html#_writing_re_usable_waf_tools"&gt;extended&lt;/a&gt; by providing Python modules loaded through &lt;code&gt;wscript&lt;/code&gt; files
&lt;/li&gt;
&lt;li&gt;waf can be &lt;a href="http://docs.waf.googlecode.com/git/book_17/single.html#_obtaining_the_waf_file"&gt;bundled&lt;/a&gt; along with extensions to provide a single executable that performs specific tasks
&lt;/li&gt;
&lt;li&gt;waf is cross-platform, no compilation needed and can be included as a single file along with the project it builds
&lt;/li&gt;
&lt;li&gt;waf is parallel by default, it will run tasks as parallel as possible constrained by available CPU, dependencies or any limits imposed by the user
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2" id="outline-container-sec-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; The waf configuration file&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Waf expects to find a file called &lt;code&gt;wscript&lt;/code&gt; in the current directory.  
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-sec-2-1"&gt;
&lt;h3 id="sec-2-1"&gt;&lt;span class="section-number-3"&gt;2.1&lt;/span&gt; Commands&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;p&gt;
Functions in this file become exposed through waf as command line commands.  For example:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="font-weight: bold;"&gt;chirp&lt;/span&gt;(ctx):
    &lt;span style="font-weight: bold;"&gt;print&lt;/span&gt; (ctx)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
can be exercised as:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;&lt;span style="font-weight: bold;"&gt;cd&lt;/span&gt; examples/commands/
waf chirp
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class="example"&gt;
&amp;lt;waflib.Context.Context object at 0x28c0090&amp;gt;
'chirp' finished successfully (0.000s)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-sec-2-2"&gt;
&lt;h3 id="sec-2-2"&gt;&lt;span class="section-number-3"&gt;2.2&lt;/span&gt; Context object&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-2"&gt;
&lt;p&gt;
A waf command function is given a context object.  This context object may be specialized depending on the function called.  The figure from the  &lt;a href="http://docs.waf.googlecode.com/git/apidocs_17/Context.html"&gt;context reference docs&lt;/a&gt; shows the inheritance:
&lt;/p&gt;
&lt;div class="figure" id="fig:context-inheritance"&gt;
&lt;p&gt;&lt;img alt="context-inheritance.png" src="./context-inheritance.png"/&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 1:&lt;/span&gt; Inheritance of context classes.  Note, the arrows are reversed from the sense they would be drawn in a UML inheritance diagram.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2" id="outline-container-sec-3"&gt;
&lt;h2 id="sec-3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Predefined commands&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
Certain commands are reserved and treated special by waf.
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-sec-3-1"&gt;
&lt;h3 id="sec-3-1"&gt;&lt;span class="section-number-3"&gt;3.1&lt;/span&gt; Options&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-1"&gt;
&lt;p&gt;
The &lt;code&gt;options(ctx)&lt;/code&gt; function will be passed an &lt;a href="http://docs.waf.googlecode.com/git/apidocs_17/Options.html"&gt;options&lt;/a&gt; context object.  This function can be used to define command line options that waf will recognize on behalf of the project.
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="font-weight: bold;"&gt;options&lt;/span&gt;(opt):
    opt.add_option(&lt;span style="font-style: italic;"&gt;'-x'&lt;/span&gt;,&lt;span style="font-style: italic;"&gt;'--extra'&lt;/span&gt;,action=&lt;span style="font-style: italic;"&gt;'store'&lt;/span&gt;, 
                   &lt;span style="font-weight: bold;"&gt;help&lt;/span&gt;=&lt;span style="font-style: italic;"&gt;'Add something extra from the command line'&lt;/span&gt;)

&lt;span style="font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="font-weight: bold;"&gt;chirp&lt;/span&gt;(ctx):
    &lt;span style="font-weight: bold;"&gt;print&lt;/span&gt; (&lt;span style="font-style: italic;"&gt;'The little bit of extra is: "%s"'&lt;/span&gt; % ctx.options.extra)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;&lt;span style="font-weight: bold;"&gt;cd&lt;/span&gt; examples/options/
waf --extra=&lt;span style="font-style: italic;"&gt;'Just a bit of extra stuff'&lt;/span&gt; chirp
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-sec-3-2"&gt;
&lt;h3 id="sec-3-2"&gt;&lt;span class="section-number-3"&gt;3.2&lt;/span&gt; Configure&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-2"&gt;
&lt;p&gt;
The &lt;code&gt;configure(cfg)&lt;/code&gt; function is passed a &lt;a href="http://docs.waf.googlecode.com/git/apidocs_17/Configure.html"&gt;configuration&lt;/a&gt; context object.  This function can be used to persist any information between other command calls.  On possible use is to make command line options persisted.
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="font-weight: bold;"&gt;options&lt;/span&gt;(opt):
    opt.add_option(&lt;span style="font-style: italic;"&gt;'-x'&lt;/span&gt;,&lt;span style="font-style: italic;"&gt;'--extra'&lt;/span&gt;,action=&lt;span style="font-style: italic;"&gt;'store'&lt;/span&gt;, 
                   &lt;span style="font-weight: bold;"&gt;help&lt;/span&gt;=&lt;span style="font-style: italic;"&gt;'Add something extra from the command line'&lt;/span&gt;)

&lt;span style="font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="font-weight: bold;"&gt;configure&lt;/span&gt;(cfg):
    &lt;span style="font-weight: bold; font-style: italic;"&gt;cfg.env.EXTRA_MSG&lt;/span&gt; = &lt;span style="font-style: italic;"&gt;'The little bit of extra is: "%s"'&lt;/span&gt; % cfg.options.extra

&lt;span style="font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="font-weight: bold;"&gt;build&lt;/span&gt;(bld):
    &lt;span style="font-weight: bold;"&gt;print&lt;/span&gt; (bld.env.EXTRA_MSG)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;&lt;span style="font-weight: bold;"&gt;cd&lt;/span&gt; examples/configure/
waf -x &lt;span style="font-style: italic;"&gt;'Persist This'&lt;/span&gt; configure 
&lt;span style="font-weight: bold;"&gt;echo&lt;/span&gt; &lt;span style="font-style: italic;"&gt;"Configure done"&lt;/span&gt;
waf
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class="example"&gt;
Setting top to                           : /home/bv/org-pub/topics/waf/examples/configure 
Setting out to                           : /home/bv/org-pub/topics/waf/examples/configure/build 
'configure' finished successfully (0.003s)
Configure done
Waf: Entering directory `/home/bv/org-pub/topics/waf/examples/configure/build'
The little bit of extra is: "Persist This"
Waf: Leaving directory `/home/bv/org-pub/topics/waf/examples/configure/build'
'build' finished successfully (0.002s)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-sec-3-3"&gt;
&lt;h3 id="sec-3-3"&gt;&lt;span class="section-number-3"&gt;3.3&lt;/span&gt; Build&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-3"&gt;
&lt;p&gt;
In the &lt;code&gt;build(bld)&lt;/code&gt; function is where one describes to waf how to build everything.    It is passed a &lt;a href="http://docs.waf.googlecode.com/git/apidocs_17/Build.html"&gt;build&lt;/a&gt; context object.  There are several ways to do this but a simple and powerful way is to declare a task generator by calling &lt;code&gt;bld&lt;/code&gt; as a callable object.
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="font-weight: bold;"&gt;configure&lt;/span&gt;(cfg):
    &lt;span style="font-weight: bold;"&gt;return&lt;/span&gt;

&lt;span style="font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="font-weight: bold;"&gt;build&lt;/span&gt;(bld):
    bld(rule=&lt;span style="font-style: italic;"&gt;"date &amp;gt; ${TGT}"&lt;/span&gt;, target = &lt;span style="font-style: italic;"&gt;"one.txt"&lt;/span&gt;)
    bld(rule=&lt;span style="font-style: italic;"&gt;"cp ${SRC} ${TGT} &amp;amp;&amp;amp; date &amp;gt;&amp;gt; ${TGT}"&lt;/span&gt;, source=&lt;span style="font-style: italic;"&gt;"one.txt"&lt;/span&gt;, target=&lt;span style="font-style: italic;"&gt;"two.txt"&lt;/span&gt;)
    bld.install_files(&lt;span style="font-style: italic;"&gt;"${PREFIX}/examples"&lt;/span&gt;, &lt;span style="font-style: italic;"&gt;"one.txt two.txt"&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;&lt;span style="font-weight: bold;"&gt;cd&lt;/span&gt; examples/build
rm -rf build install
waf --prefix=install configure build install
ls -l build
ls -l install/examples
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class="example"&gt;
Setting top to                           : /home/bv/org-pub/topics/waf/examples/build 
Setting out to                           : /home/bv/org-pub/topics/waf/examples/build/build 
'configure' finished successfully (0.003s)
Waf: Entering directory `/home/bv/org-pub/topics/waf/examples/build/build'
[1/2] one.txt:  -&amp;gt; build/one.txt
[2/2] two.txt: build/one.txt -&amp;gt; build/two.txt
Waf: Leaving directory `/home/bv/org-pub/topics/waf/examples/build/build'
'build' finished successfully (0.015s)
Waf: Entering directory `/home/bv/org-pub/topics/waf/examples/build/build'
+ install /home/bv/org-pub/topics/waf/examples/build/install/examples/one.txt (from build/one.txt)
+ install /home/bv/org-pub/topics/waf/examples/build/install/examples/two.txt (from build/two.txt)
Waf: Leaving directory `/home/bv/org-pub/topics/waf/examples/build/build'
'install' finished successfully (0.005s)
total 16
drwxr-xr-x 2 bv bv 4096 Mar  1 19:10 c4che
-rw-r--r-- 1 bv bv  376 Mar  1 19:10 config.log
-rw-r--r-- 1 bv bv   29 Mar  1 19:10 one.txt
-rw-r--r-- 1 bv bv   58 Mar  1 19:10 two.txt
total 8
-rw-r--r-- 1 bv bv 29 Mar  1 19:10 one.txt
-rw-r--r-- 1 bv bv 58 Mar  1 19:10 two.txt
&lt;/pre&gt;
&lt;p&gt;
In this example two files are created, &lt;code&gt;one.txt&lt;/code&gt; out of thin air and &lt;code&gt;two.txt&lt;/code&gt; based on &lt;code&gt;one.txt&lt;/code&gt;.  Both of these files are then installed into a location based on the value of &lt;code&gt;PREFIX&lt;/code&gt; which is set by the standard waf &lt;code&gt;--prefix&lt;/code&gt; command line option.  A task is generated for each invocation of &lt;code&gt;bld()&lt;/code&gt; as set by the &lt;code&gt;rule&lt;/code&gt;.  Here the rule is a &lt;a href="http://docs.waf.googlecode.com/git/book_16/single.html#_scriptlet_expressions"&gt;scriptlet&lt;/a&gt; which is essentially a shell script command with some string interpolation.  As can be seen, file redirection and other shell operators can be used.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="overview"></category><category term="waf"></category></entry><entry><title>Using Conda To Package Stuff</title><link href="http://www.phy.bnl.gov/~bviren/conda" rel="alternate"></link><updated>2014-11-21T00:00:00-05:00</updated><author><name>Brett Viren</name></author><id>tag:www.phy.bnl.gov,2014-11-21:~bviren/conda</id><summary type="html">
&lt;div class="outline-2" id="outline-container-sec-1"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Overview&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I was looking through SciPy 2014 talks and found a talk on something called "Conda".  This takes pip to the level of handling builds.  It uses the same idea of "shims" scripts that I gave to Fermilab plus a worch like engine to do installation+build.  The install layout is single-rooted and uses Nix-like behavior using hardlinking instead of soft to produce derived distributions.  The packages are relocatable, not just in the trivial surface manner as UPS packages but goes into executables and scripts to make sure build paths are made relocatable.
&lt;/p&gt;
&lt;p&gt;
It has a huge body of build recipes which includes GCC, BOOST and ROOT (no Geant4).
&lt;/p&gt;
&lt;p&gt;
In short, worch may be dead, UPS may be dead, mrb may be dead.  Long live Conda.
&lt;/p&gt;
&lt;p&gt;
Well, let's see.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2" id="outline-container-sec-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Links&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://conference.scipy.org/scipy2014/schedule/presentation/1708/"&gt;Sci Py 2014 Conda Abstract&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pyvideo.org/video/2735/conda-a-cross-platform-package-manager-for-any-b"&gt;pyvideo entry&lt;/a&gt; with link to the presentation video at YouTube
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://conda.pydata.org/"&gt;Conda home page&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://conda.pydata.org/docs/intro.html"&gt;Conda docs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.continuum.io/blog/conda"&gt;Blog entry&lt;/a&gt; with some description, Continuum support Conda devel
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://binstar.org"&gt;Binstar&lt;/a&gt; is like github+pypi
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.binstar.org/"&gt;Binstar docs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://binstar.org/brettviren"&gt;My binstar account&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2" id="outline-container-sec-3"&gt;
&lt;h2 id="sec-3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Install &lt;code&gt;conda&lt;/code&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
The package management is through a single &lt;code&gt;conda&lt;/code&gt; program.  
&lt;/p&gt;
&lt;p&gt;
It looks like I can use pip to get it, but it needs &lt;code&gt;libyaml-dev&lt;/code&gt;:
&lt;/p&gt;
&lt;pre class="example"&gt;
$ sudo apt-get install libyaml-dev
$ pip install --user conda
&lt;/pre&gt;
&lt;p&gt;
But there is also &lt;a href="http://conda.pydata.org/miniconda.html"&gt;miniconda&lt;/a&gt; to try:
&lt;/p&gt;
&lt;pre class="example"&gt;
$ sudo apt-get remove --purge libyaml-dev 
$ wget http://repo.continuum.io/miniconda/Miniconda3-3.7.3-Linux-x86_64.sh
$ bash Miniconda3-3.7.3-Linux-x86_64.sh
(pick install location)
$ export PATH=/home/bv/opt/miniconda3/bin:$PATH
$ conda install conda-build
$ conda install binstar
&lt;/pre&gt;
&lt;p&gt;
This installs Python 3.4 and other stuff into the "root environment".
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2" id="outline-container-sec-4"&gt;
&lt;h2 id="sec-4"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; Try to install ROOT&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
Let's see if we can get ROOT installed via &lt;code&gt;conda&lt;/code&gt; without trying too hard
&lt;/p&gt;
&lt;pre class="example"&gt;
$ conda search root
Fetching package metadata: ..
&lt;/pre&gt;
&lt;p&gt;
Hmm, nothing….  It probably needs to be pointed at the collection of recipes on GitHub.
&lt;/p&gt;
&lt;pre class="example"&gt;
$ git clone https://github.com/conda/conda-recipes.git
$ conda build conda-recipes/root
&lt;/pre&gt;
&lt;p&gt;
This fails at test.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2" id="outline-container-sec-5"&gt;
&lt;h2 id="sec-5"&gt;&lt;span class="section-number-2"&gt;5&lt;/span&gt; Make a Conda environment&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;pre class="example"&gt;
$ conda create -n rootenv-py27 python=2
$ source activate rootenv-py27
$ binstar search -t conda root
...
     jsw-fnal/root_numpy       |    3.3.1 | conda           | linux-64       
                                          : An interface between ROOT and NumPy
     jsw-fnal/rootpy           |    0.7.1 | conda           | linux-64       
                                          : A pythonic layer on top of the ROOT framework's PyROOT bindings.
     kcolletti1/rootpy         |    0.7.1 | conda           | linux-64       
                                          : A pythonic layer on top of the ROOT framework's PyROOT bindings.
     zhenxieit/root            |  5.99.05 | conda           | linux-64       
                                          : http://root.cern.ch
...
$ conda install --channel https://conda.binstar.org/zhenxieit root
&lt;/pre&gt;
&lt;p&gt;
That gets ROOT installed but in what I think is a wrong location.  I can try the usual setup:
&lt;/p&gt;
&lt;pre class="example"&gt;
$ source miniconda3/envs/rootenv-py27/root/bin/thisroot.sh
&lt;/pre&gt;
&lt;p&gt;
But, starting ROOT crashes and burns.  Maybe due to it being version 5.99.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2" id="outline-container-sec-6"&gt;
&lt;h2 id="sec-6"&gt;&lt;span class="section-number-2"&gt;6&lt;/span&gt; Build up explicit devel env&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-6"&gt;
&lt;pre class="example"&gt;
$ conda create -n gcc29py27 python=2 
$ source activate gcc29py27
&lt;/pre&gt;
&lt;p&gt;
Now, let's build GCC
&lt;/p&gt;
&lt;pre class="example"&gt;
$ conda build conda-recipes/gcc-4.9
There was an error importing jinja2.
Please run `conda install jinja2` to enable jinja template support
BUILD START: gcc-4.9.1-0
Fetching package metadata: ...
Error: No packages found in current linux-64 channels matching: gmp &amp;gt;=4.3.2
&lt;/pre&gt;
&lt;p&gt;
Hmm….
&lt;/p&gt;
&lt;pre class="example"&gt;
$ ls -d conda-recipes/gmp*
conda-recipes/gmp  conda-recipes/gmp-4  conda-recipes/gmpy  conda-recipes/gmpy2
&lt;/pre&gt;
&lt;p&gt;
That first one is v5.  Use the second explicitly:
&lt;/p&gt;
&lt;pre class="example"&gt;
$ conda build conda-recipes/gmp-4
...
====================================
1 of 58 tests failed
Please report to gmp-bugs@gmplib.org
====================================
make[4]: *** [check-TESTS] Error 1
make[4]: Leaving directory `/home/bv/projects/conda/miniconda3/conda-bld/work/gmp-4.3.2/tests/mpz'
make[3]: *** [check-am] Error 2
make[3]: Leaving directory `/home/bv/projects/conda/miniconda3/conda-bld/work/gmp-4.3.2/tests/mpz'
make[2]: *** [check-recursive] Error 1
make[2]: Leaving directory `/home/bv/projects/conda/miniconda3/conda-bld/work/gmp-4.3.2/tests'
make[1]: *** [check-recursive] Error 1
make[1]: Leaving directory `/home/bv/projects/conda/miniconda3/conda-bld/work/gmp-4.3.2'
make: *** [check] Error 2
Command failed: /bin/bash -x -e /home/bv/projects/conda/conda-recipes/gmp-4/build.sh
&lt;/pre&gt;
&lt;p&gt;
Try again with &lt;code&gt;make check&lt;/code&gt; commented out again.  Complete, and install like:
&lt;/p&gt;
&lt;pre class="example"&gt;
$ conda install -n gcc29py27 miniconda3/pkgs/gmp-4.3.2-0.tar.bz2
&lt;/pre&gt;
&lt;p&gt;
Now, have to repeat this manually with all build dependencies. (?)
&lt;/p&gt;
&lt;pre class="example"&gt;
$ conda build conda-recipes/mpfr
$ conda install miniconda3/pkgs/mpfr-3.1.2-0.tar.bz2 
$ conda build conda-recipes/mpc
BUILD START: mpc-1.0.1-0
Fetching package metadata: ...
Error: No packages found in current linux-64 channels matching: mpfr
&lt;/pre&gt;
&lt;p&gt;
Dunno.  Copying the built package seemed to get things going
&lt;/p&gt;
&lt;pre class="example"&gt;
$ cp miniconda3/pkgs/mpfr-3.1.2-0.tar.bz2 miniconda3/conda-bld/linux-64/
$ conda build -b conda-recipes/mpc
$ rm miniconda3/conda-bld/src_cache/mpc-1.0.1.tar.gz.part
$ wget http://www.multiprecision.org/mpc/download/mpc-1.0.1.tar.gz
$ mv mpc-1.0.1.tar.gz miniconda3/conda-bld/src_cache/
$ conda build -b conda-recipes/mpc
$ conda build -b conda-recipes/isl
&lt;/pre&gt;
&lt;p&gt;
Then, the &lt;code&gt;mpc&lt;/code&gt; source download failed half way through.  Dunno why.  Remove the part and &lt;code&gt;wget&lt;/code&gt; the source into place manually.  Then &lt;code&gt;mpc&lt;/code&gt; is built and so is &lt;code&gt;isl&lt;/code&gt;.  Now:
&lt;/p&gt;
&lt;pre class="example"&gt;
$ conda build -b conda-recipes/gcc-4.9
BUILD START: gcc-4.9.1-0
Fetching package metadata: ...
Error: No packages found in current linux-64 channels matching: mpc &amp;gt;=0.8.1
&lt;/pre&gt;
&lt;p&gt;
WTF.  Where did &lt;code&gt;mpc&lt;/code&gt; package go?  It builds but never makes a &lt;code&gt;.tar.bz2&lt;/code&gt; package.    redoing the build but now without &lt;code&gt;-b&lt;/code&gt; makes the package.  This is driving me batty.
&lt;/p&gt;
&lt;pre class="example"&gt;
$ conda build conda-recipes/mpc
$ conda build conda-recipes/isl
$ conda build conda-recipes/cloog
&lt;/pre&gt;
&lt;p&gt;
Arg, cloog wants gmp 5.
&lt;/p&gt;
&lt;pre class="example"&gt;
$ conda build conda-recipes/gmp
$ conda build conda-recipes/cloog
$ conda build conda-recipes/gcc-4.9
BUILD START: gcc-4.9.1-0
Fetching package metadata: ...
Error: No packages found in current linux-64 channels matching: cloog 0.18.1
&lt;/pre&gt;
&lt;p&gt;
Version shear, I guess &lt;code&gt;cloog&lt;/code&gt; recipe isn't updated.  Let's build GCC 4.8 instead.
&lt;/p&gt;
&lt;pre class="example"&gt;
$ conda build conda-recipes/gcc-4.8
checking for version 0.10 of ISL... no
checking for version 0.11 of ISL... no
checking for version 0.12 of ISL... no
configure: error: Unable to find a usable ISL.  See config.log for details.
Command failed: /bin/bash -x -e /home/bv/projects/conda/conda-recipes/gcc-4.8/build.sh
&lt;/pre&gt;
&lt;p&gt;
WTF.
&lt;/p&gt;
&lt;pre class="example"&gt;
$ conda install miniconda3/pkgs/gmp-5.1.2-5.tar.bz2 
$ conda install miniconda3/pkgs/mpfr-3.1.2-0.tar.bz2 
$ conda install miniconda3/pkgs/mpc-1.0.1-0.tar.bz2 
$ conda install miniconda3/pkgs/isl-0.12.2-1.tar.bz2 
$ conda build conda-recipes/gcc-4.8
&lt;/pre&gt;
&lt;p&gt;
I have no idea what I'm doing.
&lt;/p&gt;
&lt;p&gt;
Same failure.  Checking GCC &lt;code&gt;config.log&lt;/code&gt; shows undefined ref to GMP symbol in isl.  This is probably due to me switching to GMP5 after building ISL.  Ya think?
&lt;/p&gt;
&lt;pre class="example"&gt;
$ conda remove isl
$ rm -r ./miniconda3/pkgs/isl-0.12.2-1*
$ conda build conda-recipes/isl
$ conda build conda-recipes/gcc-4.8
&lt;/pre&gt;
&lt;p&gt;
This craps out again.  That's enough crap for now.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2" id="outline-container-sec-7"&gt;
&lt;h2 id="sec-7"&gt;&lt;span class="section-number-2"&gt;7&lt;/span&gt; One more try:&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-7"&gt;
&lt;pre class="example"&gt;
$ bash Miniconda3-3.7.3-Linux-x86_64.sh 
$ which conda
$ export PATH=/opt/bv/projects/conda/miniconda3/bin:$PATH
$ conda update conda
$ conda install conda-build
$ conda build conda-recipes/gmp
$ conda build conda-recipes/mpc
$ conda install gmp
$ conda install /opt/bv/projects/conda/miniconda3/conda-bld/linux-64/gmp-5.1.2-5.tar.bz2
$ conda build conda-recipes/mpc
$ conda build conda-recipes/mpfr
$ find . -name 'mpfr*.bz2'
$ tar -tvf ./miniconda3/conda-bld/broken/mpfr-3.1.2-0.tar.bz2
$ cp ./miniconda3/conda-bld/broken/mpfr-3.1.2-0.tar.bz2 miniconda3/conda-bld/linux-64/
$ conda install miniconda3/conda-bld/linux-64/mpfr-3.1.2-0.tar.bz2 
$ conda build conda-recipes/mpc
$ ls /opt/bv/projects/conda/miniconda3/conda-bld/src_cache
$ rm /opt/bv/projects/conda/miniconda3/conda-bld/src_cache/mpc-1.0.1.tar.gz.part 
$ conda build conda-recipes/mpc
$ find . -name 'mpc*'
$ cat ./conda-recipes/mpc/meta.yaml 
$ wget http://www.multiprecision.org/mpc/download/mpc-1.0.1.tar.gz
$ mv mpc-1.0.1.tar.gz /opt/bv/projects/conda/miniconda3/conda-bld/src_cache/
$ rm /opt/bv/projects/conda/miniconda3/conda-bld/src_cache/mpc-1.0.1.tar.gz.part 
$ conda build conda-recipes/mpc
$ conda install /opt/bv/projects/conda/miniconda3/conda-bld/linux-64/mpc-1.0.1-0.tar.bz2

$ conda build conda-recipes/isl
$ conda install /opt/bv/projects/conda/miniconda3/conda-bld/linux-64/isl-0.12.2-1.tar.bz2
$ conda build conda-recipes/cloog
$ conda install /opt/bv/projects/conda/miniconda3/conda-bld/linux-64/cloog-0.18.0-0.tar.bz2
$ conda build conda-recipes/gcc-4.8
$ conda install /opt/bv/projects/conda/miniconda3/conda-bld/linux-64/gcc-4.8.2-2.tar.bz2
&lt;/pre&gt;
&lt;p&gt;
Okay, success.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry></feed>