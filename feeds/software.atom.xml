<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>They Call Me Brett</title><link href="http://brettviren.github.io/" rel="alternate"></link><link href="http://brettviren.github.io/feeds/software.atom.xml" rel="self"></link><id>http://brettviren.github.io/</id><updated>2015-08-15T00:00:00-04:00</updated><entry><title>HEP/Nix Packages.</title><link href="http://brettviren.github.io/nix" rel="alternate"></link><updated>2015-08-15T00:00:00-04:00</updated><author><name>Brett Viren</name></author><id>tag:brettviren.github.io,2015-08-15:nix</id><summary type="html">
&lt;div class="outline-2" id="outline-container-sec-1"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Nix in a Nut Shell&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
&lt;a href="https://nixos.org/nix/"&gt;Nix&lt;/a&gt; is the package manager used by NixOS and can be used entirely from user space on POSIX'sh OSes.  Its basic design is unique in the realm of software packaging (there is a similar, derived implementation called &lt;a href="http://www.gnu.org/software/guix/"&gt;Guix&lt;/a&gt; which differs only in the configuration language used).  
&lt;/p&gt;
&lt;p&gt;
To begin to understand Nix, it is useful to compare and contrast it to systems which are already familiar to some in the HEP community which is done in the following sections.
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-sec-1-1"&gt;
&lt;h3 id="sec-1-1"&gt;&lt;span class="section-number-3"&gt;1.1&lt;/span&gt; The Nix Package Store&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
In contrast with other systems, Nix does not interleave the files of a package under a single-rooted file-system hierarchy such as the &lt;a href="http://www.pathname.com/fhs/"&gt;FHS&lt;/a&gt; (ie, the usual &lt;code&gt;/usr/{lib,bin,include}&lt;/code&gt;) like Debian GNU/Linux nor does it  produce isolated bundles which leverage a base file-system hierarchy such as in Mac OS X.  
&lt;/p&gt;
&lt;p&gt;
The Nix &lt;i&gt;package store&lt;/i&gt; contains the directly installed file contents of Nix packages.  It is somewhat similar to  the "&lt;a href="https://www.fnal.gov/docs/products/ups/ReferenceManual/html/overview.html#32926"&gt;product database&lt;/a&gt;" of UPS, the module area of &lt;a href="http://modules.sourceforge.net/"&gt;Environment Modules&lt;/a&gt; and the LCGCMT "externals" area.  Some common features include:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;a well defined root directory containing the files of the installed packages.
&lt;/li&gt;
&lt;li&gt;a per-package directory under this root named with identifiers used to later build a working environment.
&lt;/li&gt;
&lt;li&gt;an FHS-like layout within each package directory.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
The Nix &lt;i&gt;package store&lt;/i&gt; differs from these other systems in some important ways:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;There is a &lt;b&gt;single directory root&lt;/b&gt; common among all compatible installations.  The prevailing convention is to place the store under &lt;code&gt;/nix/&lt;/code&gt;.  This must be a mount, not just a symlink.  Other root directory conventions may be chosen but all packages must be built for that mount point.
&lt;/li&gt;
&lt;li&gt;While a package's directory is named with the package name, version and other human-oriented identifiers it also contains a cryptographic hash formed from the dependencies required to build that package.
&lt;/li&gt;
&lt;li&gt;A package directory is self-contained in that all files associated with the installation of that package reside in the directory (the others allow for, and in the case of UPS in practice, violate this).
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
These unique aspects of the Nix package store allow for a number of beneficial features:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Packages can be shared in binary form with robust dependency resolution.
&lt;/li&gt;
&lt;li&gt;Binary executable and library files do not need environment variables to locate dependencies due to the common path.
&lt;/li&gt;
&lt;li&gt;Packages are precisely reproducible from source and binary can be validated.  This allows for a wide pool of package builders to share binary packages with a wide community of users.  This additional level of verification and validity is fully lacking in any other packaging system known to be used in HEP.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-sec-1-2"&gt;
&lt;h3 id="sec-1-2"&gt;&lt;span class="section-number-3"&gt;1.2&lt;/span&gt; User Environment&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;p&gt;
Another unique aspect of Nix packages is how a user environment is produced.  To speak generally, a user environment is created as some aggregation or view of a larger package store.  This aggregation can be performed in a number of ways and typically relies partly on environment variables and the file system.
&lt;/p&gt;
&lt;p&gt;
In the case of conventional GNU/Linux or Mac OS X user environments, the default environment is provided by the FHS-like directory hierarchy typically rooted in &lt;code&gt;/usr&lt;/code&gt; and brief settings of a small number of environment variables such as &lt;code&gt;PATH&lt;/code&gt; to find executable files and relying on conventions "baked" into the loader to find libraries.
&lt;/p&gt;
&lt;p&gt;
The packaging commonly used in HEP layers on top of this OS-default aggregation which relies heavily both on environment variable settings and some file system organization as described in the previous section.  The environment settings typically extend the standard &lt;code&gt;PATH&lt;/code&gt;-like variables, typically with one additional component for every package or project being aggregated.  Many package require their own &lt;code&gt;PATH&lt;/code&gt;-like variables (eg &lt;code&gt;PYTHONPATH&lt;/code&gt;) or single-location variables (eg ROOT's &lt;code&gt;ROOTSYS&lt;/code&gt;) to be extended or set.  Also typical is to set one or more "standard" variables for every single package "just in case they might be needed" (eg CMT and UPS set a &lt;code&gt;&amp;lt;PACKAGE&amp;gt;_DIR&lt;/code&gt; variable).
&lt;/p&gt;
&lt;p&gt;
Heavily relying on environment variable-based aggregation is problematic for a few reasons:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;it is ephemeral, existing only in the shell session.
&lt;/li&gt;
&lt;li&gt;its construction is ill-defined, depending on what setup scripts were run and in what order.
&lt;/li&gt;
&lt;li&gt;its often confusing to users.
&lt;/li&gt;
&lt;li&gt;it can lead to inconsistencies, particularly during development.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Nix takes a more file-system-oriented approach and NixOS is entirely based on this approach such that the entire OS-level environment is subsumed.  With Nix, a user may have one or more "profiles".  Each profile provides the files for the working environment and which are aggregated into a single directory that follows an FSH-like convention.  The file-system hierarchy in the profile is recorded through symbolic links into the Nix &lt;i&gt;package store&lt;/i&gt;.  
&lt;/p&gt;
&lt;p&gt;
This file-system aggregation has a number of benefits:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;the profile directory provides a tangible record of the user environment.
&lt;/li&gt;
&lt;li&gt;user environment variables require minimal modification (single entry added to &lt;code&gt;PATH&lt;/code&gt;-like variables).
&lt;/li&gt;
&lt;li&gt;profiles can be populated in an indirect manner allowing site-wide or group-wide release definitions (eg, defining through a "pro", "dev" etc pattern, or through release definitions).
&lt;/li&gt;
&lt;li&gt;atomic upgrades and rollback patterns are trivial.
&lt;/li&gt;
&lt;li&gt;profile directories at a site may be automatically queried by site administrators to determine what packages are actually in use and which can be safely purged.
&lt;/li&gt;
&lt;li&gt;profiles are amenable to &lt;code&gt;chroot&lt;/code&gt; or similar containment.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-sec-1-3"&gt;
&lt;h3 id="sec-1-3"&gt;&lt;span class="section-number-3"&gt;1.3&lt;/span&gt; Package Definition&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-3"&gt;
&lt;p&gt;
Another way in which Nix is unique among the systems in use in HEP is that it is comprehensive in providing for configuration management, build automation, package distribution and installation and user environment management.  None of the other systems managed, by themselves, cover this necessary ground.  
&lt;/p&gt;
&lt;p&gt;
Nix package definitions are short text files in the Nix packaging language.  They provide parameters interpreted by functionality built in to Nix or provide any special shell commands needed for less common build methods.  These specifications are highly portable due to leveraging a well characterized build environment - that of all the other Nix packages.  This allows for a huge amount of shared effort not obtainable by other systems.  For example, one individual or small group can maintain the Nix package specification for ROOT and the entire world can benefit from its use. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2" id="outline-container-sec-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Impedance mismatches between Nix and HEP&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
At the heart of Nix is the &lt;i&gt;package store&lt;/i&gt; and its contents are produced based on the other packages it already contains.  Because of the hashing mechanism the location of this store is "baked" into the package names and binaries are built against their dependencies located under the &lt;i&gt;package store&lt;/i&gt;.  
&lt;/p&gt;
&lt;p&gt;
The implication of this is that any package can be considered part of a "package realm" defined by the mount point.  An apparently trivial change of this mount point requires rebuilding all packages.  The benefit of accepting this limitation is that packages need not be /relocatable/&lt;sup&gt;&lt;a class="footref" href="#fn.1" id="fnr.1" name="fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; and that binaries built by one individual can be shared and need not be built by any other individual using the same mount point.
&lt;/p&gt;
&lt;p&gt;
For NixOS installations this limitation is invisible as the system itself relies on the &lt;i&gt;package store&lt;/i&gt; to be found at the &lt;code&gt;/nix&lt;/code&gt; root.  However, essentially all HEP computer installations do not run NixOS and thus a common Nix &lt;i&gt;package store&lt;/i&gt; mount must be created in context of whatever native policies exist.  The main issues with this are:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;many HEP users do not have administrator privileges on the computer systems they use.
&lt;/li&gt;
&lt;li&gt;HEP clusters (and the wider Grid) have local policies driven by various forces and negotiations are needed to established a shared &lt;code&gt;/nix&lt;/code&gt; mount.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
There are two known solutions to this issue.
&lt;/p&gt;
&lt;p&gt;
The first is to give up on a global &lt;i&gt;package store&lt;/i&gt; mount point and leave it to each installation to pick one and simply spend the CPU time to populate the store by building packages from source.  Some increased coverage could be had by exploiting the global AFS namespace.  CVMFS is becoming more prevalent and with it another common convention for mount points is possible.  Both provide a delivery mechanism although that is redundant with the one that Nix also provides.
&lt;/p&gt;
&lt;p&gt;
The other solution is to use the functionality of &lt;a href="http://proot.me/"&gt;PRoot&lt;/a&gt; which is a user-level &lt;code&gt;chroot&lt;/code&gt; container mechanism.  It is a light weight way to effectively produce a "virtual" mount in the context of a single job.  The globally &lt;code&gt;/nix&lt;/code&gt; mount can then be provided even if it may reside in a user's home directory, or a group location or otherwise not directly mounted.  This virtual mount is achieved through some intercepted system calls and so some small performance overhead is suffered.  Quantifying this overhead would be a necessary task to accepting this otherwise good solution.
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-sec-2-1"&gt;
&lt;h3 id="sec-2-1"&gt;&lt;span class="section-number-3"&gt;2.1&lt;/span&gt; Issues with existing HEP build systems&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;p&gt;
Some software is resistant to producing Nix packages.  Because Nix is designed to build from source any software that is difficult to build from source is resistant to using in a Nix based system.  
&lt;/p&gt;
&lt;p&gt;
Of some small importance to HEP is proprietary, binary-only packages.  To deal with this, the "source" of the build is the provided binaries.  Nix has developed PatchELF to rewrite compiled-in paths to match the &lt;i&gt;package store&lt;/i&gt; path, allowing the result to be truly relocatable.
&lt;/p&gt;
&lt;p&gt;
More problematic are existing large, important software projects which have grown intricately intertwined with local computing infrastructure and installation patterns.  An example is the &lt;code&gt;UPS/cetbuilttools&lt;/code&gt; based software largely developed at Fermilab for US HEP Intensity Frontier experiments.  It is effectively not packages are not possible to build these package from "first principles" and instead they require, down to their low-level package build configuration and source code, intricate intertwining with the end-user environment management system (UPS).  As a consequence, they are built for a small number of OS platforms and can only be built for a Nix-based system after some significant effort and buy-in by Fermilab.   
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2" id="outline-container-sec-3"&gt;
&lt;h2 id="sec-3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Plan for a Prototype&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
To determine if Nix can be used in a practical sense in HEP, some prototyping is the first plan of action.  The pat to this is:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;Use the PRoot approach to provide &lt;code&gt;/nix&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;Work on package specification for common HEP packages, starting with ROOT&lt;sup&gt;&lt;a class="footref" href="#fn.2" id="fnr.2" name="fnr.2"&gt;2&lt;/a&gt;&lt;/sup&gt;.
&lt;/li&gt;
&lt;li&gt;Include releases of experiment-level package.
&lt;/li&gt;
&lt;li&gt;Develop methods and helper tools to develop on experiment packages.
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;
&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a class="footnum" href="#fnr.1" id="fn.1" name="fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;p class="footpara"&gt;
The term "relocatable" is used in some systems like UPS.  There, it takes a weak definition as the relocation is only possible through setting user environment variables.  Nix provides a PatchELF tool with which one can produce binary executable and library files which can be truly relocated.  It works by rewriting the path strings that are compiled into the binaries.  If rewritten to their relocated locations the environment setting that must otherwise be modified need not be.
&lt;/p&gt;&lt;/div&gt;
&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a class="footnum" href="#fnr.2" id="fn.2" name="fn.2"&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;p class="footpara"&gt;
Someone has already packaged a recent ROOT 5 for Nix but its build happens to be failing at the time of writing.
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</summary><category term="packaging"></category><category term="unix"></category><category term="hsf"></category></entry></feed>