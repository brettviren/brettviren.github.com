<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>They Call Me Brett</title><link href="http://brettviren.github.io/" rel="alternate"></link><link href="http://brettviren.github.io/feeds/all.atom.xml" rel="self"></link><id>http://brettviren.github.io/</id><updated>2015-12-28T00:00:00-05:00</updated><entry><title></title><link href="http://brettviren.github.io/foo" rel="alternate"></link><updated>2015-12-28T00:00:00-05:00</updated><author><name>Brett Viren</name></author><id>tag:brettviren.github.io,2015-12-28:foo</id><summary type="html">
&lt;div class="outline-2" id="outline-container-orgheadline3"&gt;
&lt;h2 id="orgheadline3"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; A real heading&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;pre class="example"&gt;
just some text
for a verbatim
example
&lt;/pre&gt;
&lt;p&gt;
#+BEGIN&lt;sub&gt;EXAMPLE&lt;/sub&gt;
some more text and
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-4" id="outline-container-orgheadline1"&gt;
&lt;h4 id="orgheadline1"&gt;&lt;span class="section-number-4"&gt;1.0.1&lt;/span&gt; this gets interpreted as a heading&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-0-1"&gt;
&lt;p&gt;
which it shouldn't
#+END&lt;sub&gt;EXAMPLE&lt;/sub&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline2"&gt;
&lt;h3 id="orgheadline2"&gt;&lt;span class="section-number-3"&gt;1.1&lt;/span&gt; A tagged heading   &lt;span class="tag"&gt;&lt;span class="sometag"&gt;sometag&lt;/span&gt; &lt;span class="someothertag"&gt;someothertag&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
blah blah
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2" id="outline-container-orgheadline4"&gt;
&lt;h2 id="orgheadline4"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; This is still needing work   &lt;span class="tag"&gt;&lt;span class="todo"&gt;todo&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
You shouldn't see me.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title></title><link href="http://brettviren.github.io/pelican-themes" rel="alternate"></link><updated>2015-12-28T00:00:00-05:00</updated><author><name>Brett Viren</name></author><id>tag:brettviren.github.io,2015-12-28:pelican-themes</id><summary type="html">
&lt;div class="outline-2" id="outline-container-orgheadline1"&gt;
&lt;h2 id="orgheadline1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Pelican Themes&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
The desired themes should satisfy these criteria
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;looks "good", if it fails this it gets a zero&lt;/li&gt;
&lt;li&gt;good difference between code and text, distinct but not jarring&lt;/li&gt;
&lt;li&gt;indices made up of "teasers" of articles, (this can probably be easily tweaked)&lt;/li&gt;
&lt;li&gt;large images should not be cut out (see GraphViz diagram in "desk" for example)&lt;/li&gt;
&lt;li&gt;prominently displays list of categories links&lt;/li&gt;
&lt;li&gt;prominently displays list of archives link&lt;/li&gt;
&lt;li&gt;prominently displays list of tags link&lt;/li&gt;
&lt;li&gt;must wrap long code lines&lt;/li&gt;
&lt;li&gt;must gracefully scale&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Testing
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;check for screen shots in theme dir.  They are not often up-to-date at all, but if horrible, then pass.&lt;/li&gt;
&lt;li&gt;generate with &lt;code&gt;rm -rf output/*; pelican content -t ~/org-pub/pelican/pelican-themes/THEME&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;reload &lt;a href="http://127.0.0.1:8000/"&gt;http://127.0.0.1:8000/&lt;/a&gt;.  Must hit reload to get all CSS refreshed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Selected:
&lt;/p&gt;
&lt;dl class="org-dl"&gt;
&lt;dt&gt;elegant&lt;/dt&gt;&lt;dd&gt;Title-only indices, interesting category browser (super-script number counts the entries, kind of weird), drop down menu.  good but maybe too cutsie, tag searching, general search input but it is broken (no search.html).  Scaling to mobile.  dump scaling on far zoom out&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;
Top ranked
&lt;/p&gt;
&lt;dl class="org-dl"&gt;
&lt;dt&gt;gum&lt;/dt&gt;&lt;dd&gt;good side bar (pages, categories, tags), teaser indices, handles long code lines, nav bar, tags&lt;/dd&gt;
&lt;dt&gt;pelipress&lt;/dt&gt;&lt;dd&gt;good nav, good scaling, teaser indices, scrolling code, collapsible sidebar, no home link, needs translation&lt;/dd&gt;
&lt;dt&gt;fresh&lt;/dt&gt;&lt;dd&gt;good layout, style, scale.  good nav&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;
Second place
&lt;/p&gt;
&lt;dl class="org-dl"&gt;
&lt;dt&gt;blueidea&lt;/dt&gt;&lt;dd&gt;(3) most recent article followed by other articles with teasers. top category bar&lt;/dd&gt;
&lt;dt&gt;bootstrap&lt;/dt&gt;&lt;dd&gt;(3) teaser-based main, sidebar links, tags and categories easy access.  visual separation between teasers could use some kind of divider.&lt;/dd&gt;
&lt;dt&gt;bootstrap2&lt;/dt&gt;&lt;dd&gt;(3) similar, a little more clear layout&lt;/dd&gt;
&lt;dt&gt;cebong&lt;/dt&gt;&lt;dd&gt;(3) looks very nice, main+teasers index, looks like LaTeX, cuts big images&lt;/dd&gt;
&lt;dt&gt;Just-Read&lt;/dt&gt;&lt;dd&gt;(3) good, single teaser followed by title-only index, no category listing&lt;/dd&gt;
&lt;dt&gt;lannisport&lt;/dt&gt;&lt;dd&gt;(3) overlayed side bar, full article index, "paper" background&lt;/dd&gt;
&lt;dt&gt;pelican-sober&lt;/dt&gt;&lt;dd&gt;(3) looks good, scales good, lacks some nav, full-article indices&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;
Questions:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;how to control the teaser blurb?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title></title><link href="http://brettviren.github.io/pelican-themes-also-ran" rel="alternate"></link><updated>2015-12-28T00:00:00-05:00</updated><author><name>Brett Viren</name></author><id>tag:brettviren.github.io,2015-12-28:pelican-themes-also-ran</id><summary type="html">&lt;dl class="org-dl"&gt;
&lt;dt&gt;aboutwilson&lt;/dt&gt;&lt;dd&gt;(2) simple, nice looking, teaser followed by category and tags list, navigation footer.&lt;/dd&gt;

&lt;dt&gt;notmyidea&lt;/dt&gt;&lt;dd&gt;(0) default, nice looking, shows entire article on main index, gives categories in a header bar.&lt;/dd&gt;

&lt;dt&gt;alchemy&lt;/dt&gt;&lt;dd&gt;(2) nice looking, simple style, shows heads of 5 articles on main index, no category bar.&lt;/dd&gt;

&lt;dt&gt;backdrop&lt;/dt&gt;&lt;dd&gt;(0) fails &lt;code&gt;CRITICAL: UndefinedError: 'articles_paginator' is undefined&lt;/code&gt;&lt;/dd&gt;

&lt;dt&gt;basic&lt;/dt&gt;&lt;dd&gt;(1) looks okay, content all on LHS of screen, teaser, no categories/tags&lt;/dd&gt;

&lt;dt&gt;bluegrasshopper&lt;/dt&gt;&lt;dd&gt;(1) thin strip of content, no yeaser, highly styled, bad font scaling&lt;/dd&gt;

&lt;dt&gt;blue-penguine&lt;/dt&gt;&lt;dd&gt;(2) not blue, clean, white, full articles on main page, link to "Archive", no category bar, no teasers.&lt;/dd&gt;

&lt;dt&gt;bold&lt;/dt&gt;&lt;dd&gt;(0) fails &lt;code&gt;CRITICAL: TypeError: expected string or buffer&lt;/code&gt;&lt;/dd&gt;

&lt;dt&gt;bootlex&lt;/dt&gt;&lt;dd&gt;(1) looks nice, teasers on main page, links in RHS sidebar, tags but no categories.  Would needs translating to en and some fine-tuning of text (eg, removal of "Blog" title).&lt;/dd&gt;

&lt;dt&gt;brownstone&lt;/dt&gt;&lt;dd&gt;(2) main+teaser layout, nice but too stylish for me&lt;/dd&gt;

&lt;dt&gt;BT3-Flat&lt;/dt&gt;&lt;dd&gt;(0) picture-scroll-reveal style.  Looks like a damn startup company page.&lt;/dd&gt;

&lt;dt&gt;buildtexts&lt;/dt&gt;&lt;dd&gt;(2) last+teaser layout&lt;/dd&gt;

&lt;dt&gt;burrito&lt;/dt&gt;&lt;dd&gt;(0) failed =CRITICAL: TemplateSyntaxError: Encountered unknown tag 'assets'=&lt;/dd&gt;
&lt;/dl&gt;


&lt;dl class="org-dl"&gt;
&lt;dt&gt;chunk&lt;/dt&gt;&lt;dd&gt;(2) lots of unused space.  no distinction between links and categories&lt;/dd&gt;

&lt;dt&gt;croswsfoot&lt;/dt&gt;&lt;dd&gt;(2) unused space, but zoomable, teasers, images okay&lt;/dd&gt;

&lt;dt&gt;foundation-default-colours&lt;/dt&gt;&lt;dd&gt;(2) looks good, teaser indices, no archive, side bar&lt;/dd&gt;

&lt;dt&gt;franticworld&lt;/dt&gt;&lt;dd&gt;(0) too stylish&lt;/dd&gt;

&lt;dt&gt;html5-dopetrope&lt;/dt&gt;&lt;dd&gt;(0)&lt;/dd&gt;

&lt;dt&gt;irfan&lt;/dt&gt;&lt;dd&gt;(0) failed&lt;/dd&gt;

&lt;dt&gt;iris&lt;/dt&gt;&lt;dd&gt;(1) looks nice but more for text, not great text rendering, long code lines don't wrap&lt;/dd&gt;

&lt;dt&gt;jesuislibre&lt;/dt&gt;&lt;dd&gt;(0)&lt;/dd&gt;

&lt;dt&gt;lazystrap&lt;/dt&gt;&lt;dd&gt;(0) failed&lt;/dd&gt;

&lt;dt&gt;lightweight&lt;/dt&gt;&lt;dd&gt;(2) looks nice, no tags, teaser indices, needs translations, background needs work&lt;/dd&gt;

&lt;dt&gt;lovers&lt;/dt&gt;&lt;dd&gt;(1) too bloggy, resizes dumbly&lt;/dd&gt;

&lt;dt&gt;maggner-pelican&lt;/dt&gt;&lt;dd&gt;(0) fails&lt;/dd&gt;

&lt;dt&gt;martin-pelican&lt;/dt&gt;&lt;dd&gt;(1) styled for mobile&lt;/dd&gt;

&lt;dt&gt;martyalchin&lt;/dt&gt;&lt;dd&gt;(1) somewhat broken, looks nice, not much navigation&lt;/dd&gt;

&lt;dt&gt;mg&lt;/dt&gt;&lt;dd&gt;(2) okay, looks like some MicroSoft-world blog, fonts are hard on the eyes&lt;/dd&gt;

&lt;dt&gt;mnmlist&lt;/dt&gt;&lt;dd&gt;(1) too much so&lt;/dd&gt;

&lt;dt&gt;monospace&lt;/dt&gt;&lt;dd&gt;(2) is what it claims to be, not enough differentiation between text and code, bad placements of nav&lt;/dd&gt;

&lt;dt&gt;neat&lt;/dt&gt;&lt;dd&gt;(1) no styling&lt;/dd&gt;

&lt;dt&gt;nest&lt;/dt&gt;&lt;dd&gt;(1) okay, gigantic header, but no nav&lt;/dd&gt;

&lt;dt&gt;new-bootstrap&lt;/dt&gt;&lt;dd&gt;(2) three column index with teasers, bad scaling&lt;/dd&gt;

&lt;dt&gt;nikhil-theme&lt;/dt&gt;&lt;dd&gt;(2) date-teaser columns for index, no archive/category nav, broken tag/category links&lt;/dd&gt;

&lt;dt&gt;niu-x2&lt;/dt&gt;&lt;dd&gt;(0) failed&lt;/dd&gt;

&lt;dt&gt;nmnmlist&lt;/dt&gt;&lt;dd&gt;(1) too much so, just darker&lt;/dd&gt;

&lt;dt&gt;notebook&lt;/dt&gt;&lt;dd&gt;(1) chokes on pre-heading text&lt;/dd&gt;

&lt;dt&gt;Nuja&lt;/dt&gt;&lt;dd&gt;(2) full-article indices, wasted space&lt;/dd&gt;

&lt;dt&gt;pelican-cait&lt;/dt&gt;&lt;dd&gt;(1) wasted side space&lt;/dd&gt;

&lt;dt&gt;pelican-simplgrey&lt;/dt&gt;&lt;dd&gt;(2) bad scaling&lt;/dd&gt;
&lt;/dl&gt;


&lt;dl class="org-dl"&gt;
&lt;dt&gt;plumage&lt;/dt&gt;&lt;dd&gt;(2) bad nav, good scaling, teaser indices, scrolling code,&lt;/dd&gt;

&lt;dt&gt;pujanga&lt;/dt&gt;&lt;dd&gt;(0) some script freaks firefox&lt;/dd&gt;

&lt;dt&gt;pure&lt;/dt&gt;&lt;dd&gt;(0) wasted side space&lt;/dd&gt;

&lt;dt&gt;relapse&lt;/dt&gt;&lt;dd&gt;(0) meh&lt;/dd&gt;

&lt;dt&gt;Responsive-Pelican&lt;/dt&gt;&lt;dd&gt;(2) it's okay.  not sure what's "responsive" about it&lt;/dd&gt;

&lt;dt&gt;voidy-bootstrap&lt;/dt&gt;&lt;dd&gt;(2) nav bad, wasted header&lt;/dd&gt;

&lt;dt&gt;waterspill-en&lt;/dt&gt;&lt;dd&gt;(1) cute, but too stylish&lt;/dd&gt;
&lt;/dl&gt;
</summary></entry><entry><title>ROOT Notebook with Org</title><link href="http://brettviren.github.io/root-org-notebook" rel="alternate"></link><updated>2015-12-28T00:00:00-05:00</updated><author><name>Brett Viren</name></author><id>tag:brettviren.github.io,2015-12-28:root-org-notebook</id><summary type="html">
&lt;div class="outline-2" id="outline-container-orgheadline1"&gt;
&lt;h2 id="orgheadline1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Introduction&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
In the recent &lt;a href="https://root.cern.ch/root-has-its-jupyter-kernel"&gt;ROOT v6.06 announcement&lt;/a&gt; we got the interesting news that
one can now run ROOT from an &lt;a href="http://jupyter.org/"&gt;Jupyter&lt;/a&gt; (ne' &lt;a href="http://ipython.org/"&gt;ipython&lt;/a&gt;) &lt;i&gt;notebook&lt;/i&gt;.  The
notebook feature forges a connection between a web browser UI and a
backend &lt;a href="https://github.com/ipython/ipython/wiki/IPython-kernels-for-other-languages"&gt;kernel&lt;/a&gt; of which ROOT is one.  The notebook can be written to a
Markdown document.  This document is strikingly similar to, although
not as semantically rich as, an Org document.  The document you are
reading is an attempt to provide a simple, if verbose, ``Org Notebook''
example.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2" id="outline-container-orgheadline2"&gt;
&lt;h2 id="orgheadline2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Graphics format&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Org supports many graphics formats for inline viewing in Emacs or for
export.  Different export formats ``like'' different graphics formats.
To support exporting to both PDF (via LaTeX) and HTML in the most
simple way, we have ROOT produce plots in SVG.  SVG is native for most
HTML renderers but requires a few tweaks for LaTeX.  ROOT's SVG also
may have some Unicode characters that cause problems with LaTeX.  In
this example we deal with these issues by adding the following Org
headers:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-org"&gt;&lt;span style="font-weight: bold; font-style: italic;"&gt;#+LATEX_HEADER: \usepackage[clean,pdf]{svg}&lt;/span&gt;
&lt;span style="font-weight: bold; font-style: italic;"&gt;#+LATEX_HEADER: \DeclareUnicodeCharacter{2212}{-}&lt;/span&gt;
&lt;span style="font-weight: bold; font-style: italic;"&gt;#+LATEX_HEADER: \setsvg{pretex=\tiny}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
The &lt;code&gt;svg&lt;/code&gt; package we use here will convert SVG to PDF on the fly.
Take note of the ROOT-specific info in the &lt;a href="http://ctan.uib.no/graphics/svg/svg.pdf"&gt;&lt;code&gt;svg&lt;/code&gt; package documentation&lt;/a&gt;.
To allow the automatic SVG conversion, &lt;code&gt;pdflatex&lt;/code&gt; needs to be told it is
okay to run external programs.  You can either export the Org document
to LaTeX (&lt;code&gt;C-c C-e l l&lt;/code&gt;) and run &lt;code&gt;pdflatex&lt;/code&gt; yourself or you can add
&lt;code&gt;--shell-escape&lt;/code&gt; to the &lt;code&gt;org-latex-pdf-process&lt;/code&gt; variable.  You can set
the variable directly or customize it.  Mine looks like this:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-elisp"&gt;(&lt;span style="font-style: italic;"&gt;"pdflatex --shell-escape -interaction nonstopmode -output-directory %o %f"&lt;/span&gt; 
&lt;span style="font-style: italic;"&gt;"pdflatex --shell-escape -interaction nonstopmode -output-directory %o %f"&lt;/span&gt; 
&lt;span style="font-style: italic;"&gt;"pdflatex --shell-escape -interaction nonstopmode -output-directory %o %f"&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2" id="outline-container-orgheadline3"&gt;
&lt;h2 id="orgheadline3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; The Example&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
Start with some general ROOT plotting setup.  This Python source block
exports only the code and has no results.  We give it the &lt;code&gt;:session&lt;/code&gt;
argument so that the instance of Python is used for all subsequent
code blocks.
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="font-weight: bold;"&gt;import&lt;/span&gt; ROOT
&lt;span style="font-weight: bold; font-style: italic;"&gt;# &lt;/span&gt;&lt;span style="font-weight: bold; font-style: italic;"&gt;set batch so we don't have a TCanvas pop up&lt;/span&gt;
ROOT.gROOT.SetBatch(&lt;span style="font-weight: bold; text-decoration: underline;"&gt;True&lt;/span&gt;);
&lt;span style="font-weight: bold; font-style: italic;"&gt;c&lt;/span&gt; = ROOT.TCanvas(&lt;span style="font-style: italic;"&gt;"c"&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
Next, we make a histogram, fill it, draw it and print the canvas to
the SVG file.  Shown in the Org source for the document you are
currently reading, the &lt;code&gt;:session&lt;/code&gt; flag is given and thus the canvas
variable &lt;code&gt;c&lt;/code&gt; defined above can be used here.  Other directives tell
Org that both code and results are exported and that the result of the
code block is to interpreted as a file name.  
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="font-weight: bold; font-style: italic;"&gt;h&lt;/span&gt; = ROOT.TH1F(&lt;span style="font-style: italic;"&gt;"h"&lt;/span&gt;,&lt;span style="font-style: italic;"&gt;"ROOT Histo;X;Y"&lt;/span&gt;,64,-4,4)
h.FillRandom(&lt;span style="font-style: italic;"&gt;"gaus"&lt;/span&gt;,2000);
h.Draw();
&lt;span style="font-weight: bold; font-style: italic;"&gt;fname&lt;/span&gt; = &lt;span style="font-style: italic;"&gt;"output_0_1.svg"&lt;/span&gt;
c.Print(fname)
fname
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;p&gt;&lt;object data="output_0_1.svg" type="image/svg+xml"&gt;
Sorry, your browser does not support SVG.&lt;/object&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;
If you are reading this document from its Org sources in Emacs you may
wish to toggle inline images with &lt;code&gt;C-c C-x C-v&lt;/code&gt; to see the result
above as a figure instead of just the file name.
&lt;/p&gt;
&lt;p&gt;
Next, we do some further operation on the histogram defined above and
draw it again to a second file.  Note the increase in statistics.
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;h.FillRandom(&lt;span style="font-style: italic;"&gt;"gaus"&lt;/span&gt;)
h.Draw()
&lt;span style="font-weight: bold; font-style: italic;"&gt;fname&lt;/span&gt; = &lt;span style="font-style: italic;"&gt;"output_0_2.svg"&lt;/span&gt;
c.Print(fname)
fname
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;p&gt;&lt;object data="output_0_2.svg" type="image/svg+xml"&gt;
Sorry, your browser does not support SVG.&lt;/object&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2" id="outline-container-orgheadline4"&gt;
&lt;h2 id="orgheadline4"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; Exporting&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
You can export this Org file to PDF via LaTeX or to HTML with just a few key strokes.  You can further have the result load into a PDF or HTML viewer.  Try:
&lt;/p&gt;
&lt;dl class="org-dl"&gt;
&lt;dt&gt;&lt;code&gt;C-c C-e l l&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;export to LaTeX&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;C-c C-e l p&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;as above plus run &lt;code&gt;pfdlatex&lt;/code&gt; to make a PDF&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;C-c C-e l o&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;as above plus open the PDF file in a viewer&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;C-c C-e h h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;export to HTML&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;C-c C-e h o&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;as above plus open the HTML file in a browser&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2" id="outline-container-orgheadline5"&gt;
&lt;h2 id="orgheadline5"&gt;&lt;span class="section-number-2"&gt;5&lt;/span&gt; Summary&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
The addition of ROOT as a backend kernel for Jupyter is a nice
development.  Through Python source blocks and ROOT's PyROOT binding
one has for a while had ``Org Notebooks''.  For those that prefer to
work inside Emacs and especially with Org markup, this provides a full
featured alternative.  With some nominal setup, the Org file may be
exported to both LaTeX/PDF and HTML using SVG graphics.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="root"></category><category term="software"></category><category term="org"></category></entry><entry><title></title><link href="http://brettviren.github.io/root5" rel="alternate"></link><updated>2015-12-28T00:00:00-05:00</updated><author><name>Brett Viren</name></author><id>tag:brettviren.github.io,2015-12-28:root5</id><summary type="html">
&lt;div class="outline-2" id="outline-container-orgheadline4"&gt;
&lt;h2 id="orgheadline4"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; User Install&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;/div&gt;&lt;div class="outline-3" id="outline-container-orgheadline1"&gt;
&lt;h3 id="orgheadline1"&gt;&lt;span class="section-number-3"&gt;1.1&lt;/span&gt; Install in a PRoot&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
PRoot is like a light-weight, user-level &lt;code&gt;chroot&lt;/code&gt;.
It is a native system package on my OS:
&lt;/p&gt;
&lt;pre class="example"&gt;
$ sudo apt-get install proot
&lt;/pre&gt;
&lt;p&gt;
Following &lt;a href="https://nixos.org/wiki/How_to_install_nix_in_home_(on_another_distribution)#PRoot_Installation"&gt;PRoot-based installation&lt;/a&gt; a Nix installation is prepared like:
&lt;/p&gt;
&lt;pre class="example"&gt;
$ mkdir -p /path/to/mystuff
$ cd /path/to/mystuff
$ wget http://hydra.nixos.org/build/23017494/download/1/nix-1.9-x86_64-linux.tar.bz2
$ tar -xvf nix-1.9-x86_64-linux.tar.bz2
$ proot -b `pwd`/nix-1.9-x86_64-linux/:/nix bash
$ cd /nix
$ ls
install  store
$ ./install
$ source $HOME/.nix-profile/etc/profile.d/nix.sh

$ du -sh store
309M    store
$ nix-env -qa |wc -l
11624
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline2"&gt;
&lt;h3 id="orgheadline2"&gt;&lt;span class="section-number-3"&gt;1.2&lt;/span&gt; Native install&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;p&gt;
As light-weight as PRoot is, there is apparently some run-time overhead.  From inside the environment it provides it is possible to build Nix packages that can run native and out of a different &lt;i&gt;package store&lt;/i&gt; root than the conventional &lt;code&gt;/nix&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
Pick the directory wisely as it gets baked in to all the building that comes next.
&lt;/p&gt;
&lt;pre class="example"&gt;
$ nix-channel --update
$ mkdir -p /path/to/nix
$ NIX_STORE_DIR=/path/to/nix nix-env -i nix
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline3"&gt;
&lt;h3 id="orgheadline3"&gt;&lt;span class="section-number-3"&gt;1.3&lt;/span&gt; Developing&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-3"&gt;
&lt;p&gt;
&lt;a href="https://nixos.org/wiki/Create_and_debug_nix_packages"&gt;https://nixos.org/wiki/Create_and_debug_nix_packages&lt;/a&gt;
&lt;/p&gt;
&lt;pre class="example"&gt;
$ git clone https://github.com/NixOS/nixpkgs.git
$ export NIXPKGS=`pwd`/nixpkgs
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2" id="outline-container-orgheadline6"&gt;
&lt;h2 id="orgheadline6"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Build ROOT&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
The goal here is to build ROOT6 as a Nix package.  Someone has already packaged ROOT5, let's try that first:
&lt;/p&gt;
&lt;pre class="example"&gt;
$ nix-env -qa root
root-5.34.15
$ nix-env -i root
installing ‘root-5.34.15’
...
Linking CXX shared library ../../lib/libRGL.so
CMakeFiles/RGL.dir/src/TX11GL.cxx.o: In function `TX11GLManager::ReadGLBuffer(int)':
TX11GL.cxx:(.text+0x1b4): undefined reference to `XPutImage'
TX11GL.cxx:(.text+0x21c): undefined reference to `XCreateGC'
CMakeFiles/RGL.dir/src/TX11GL.cxx.o: In function `TX11GLManager::Flush(int)':
TX11GL.cxx:(.text+0x6ae): undefined reference to `XCopyArea'
TX11GL.cxx:(.text+0x731): undefined reference to `XCreateGC'
CMakeFiles/RGL.dir/src/TX11GL.cxx.o: In function `TX11GLManager::DeleteGLContext(int)':
TX11GL.cxx:(.text+0x835): undefined reference to `XFreeGC'
TX11GL.cxx:(.text+0x856): undefined reference to `XFreeGC'
CMakeFiles/RGL.dir/src/TX11GL.cxx.o: In function `TX11GLManager::InitGLWindow(unsigned long)':
TX11GL.cxx:(.text+0x11a2): undefined reference to `XGetGeometry'
TX11GL.cxx:(.text+0x1287): undefined reference to `XCreateColormap'
TX11GL.cxx:(.text+0x12e9): undefined reference to `XCreateWindow'
TX11GL.cxx:(.text+0x1303): undefined reference to `XMapWindow'
CMakeFiles/RGL.dir/src/TX11GL.cxx.o: In function `TX11GLManager::CreateGLPixmap(TX11GLManager::TGLContext_t&amp;amp;)':
TX11GL.cxx:(.text+0x14d3): undefined reference to `XCreatePixmap'
TX11GL.cxx:(.text+0x1561): undefined reference to `XCreateImage'
TX11GL.cxx:(.text+0x1596): undefined reference to `XInitImage'
TX11GL.cxx:(.text+0x178f): undefined reference to `XFreePixmap'
TX11GL.cxx:(.text+0x181b): undefined reference to `XFreePixmap'
CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::CreateWindow(TGWindow const*, TGLFormat const&amp;amp;, unsigned int, unsigned int, std::pair&amp;lt;void*, void*&amp;gt;&amp;amp;)':
TGLWidget.cxx:(.text+0x9b3): undefined reference to `XCreateColormap'
TGLWidget.cxx:(.text+0xa08): undefined reference to `XCreateWindow'
CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::~TGLWidget()':
TGLWidget.cxx:(.text+0x1665): undefined reference to `XFree'
CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: In function `TGLFormat::InitAvailableSamples()':
TGLFormat.cxx:(.text+0x40a): undefined reference to `XGetVisualInfo'
TGLFormat.cxx:(.text+0x485): undefined reference to `XFree'
collect2: error: ld returned 1 exit status
graf3d/gl/CMakeFiles/RGL.dir/build.make:2445: recipe for target 'lib/libRGL.so' failed
make[2]: *** [lib/libRGL.so] Error 1
CMakeFiles/Makefile2:7032: recipe for target 'graf3d/gl/CMakeFiles/RGL.dir/all' failed
make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2
make[1]: *** Waiting for unfinished jobs....
Linking CXX shared library ../lib/libTMVA.so
[ 92%] Built target TMVA
Makefile:136: recipe for target 'all' failed
make: *** [all] Error 2
builder for ‘/nix/store/l88wsvbpjr3lrz7pzfc3b0mj6hhrg25j-root-5.34.15.drv’ failed with exit code 2
error: build of ‘/nix/store/l88wsvbpjr3lrz7pzfc3b0mj6hhrg25j-root-5.34.15.drv’ failed
&lt;/pre&gt;
&lt;p&gt;
Seems that the ROOT package doesn't depend on X11 libs.
&lt;/p&gt;
&lt;p&gt;
Let's get the latest from nixpkgs
&lt;/p&gt;
&lt;p&gt;
From inside the PRoot
&lt;/p&gt;
&lt;pre class="example"&gt;
$ cd /nix
$ git clone https://github.com/NixOS/nixpkgs.git
$ export NIXPKGS=/nix/nixpkgs
$ nix-env -f $NIXPKGS -qa root
root-5.34.15
...
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline5"&gt;
&lt;h3 id="orgheadline5"&gt;&lt;span class="section-number-3"&gt;2.1&lt;/span&gt; Debug the build&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;pre class="example"&gt;
$ proot -b /srv/nix/nix-1.9-x86_64-linux/:/nix bash -l
$ source $HOME/.nix-profile/etc/profile.d/nix.sh
$ nix-shell /nix/nixpkgs --pure -A root
$ genericBuild
&lt;/pre&gt;
&lt;p&gt;
When that &lt;code&gt;genericBuild&lt;/code&gt; fails it kicks you out of the shell.  The individual steps are
&lt;/p&gt;
&lt;pre class="example"&gt;
$ unpackPhase
$ cd root
$ patchPhase
$ cmakeConfigurePhase  # leaves you in root/build/
$ buildPhase
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Building ROOT 6 for Nix</title><link href="http://brettviren.github.io/root6" rel="alternate"></link><updated>2015-12-28T00:00:00-05:00</updated><author><name>Brett Viren</name></author><id>tag:brettviren.github.io,2015-12-28:root6</id><summary type="html">
&lt;div class="outline-2" id="outline-container-orgheadline4"&gt;
&lt;h2 id="orgheadline4"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Introduction and Overview&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
There is a ROOT5 Nix package but it has some problems:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;it does not actually build (fails to find X11)&lt;/li&gt;
&lt;li&gt;it does not not build many of the features needed (eg, databases Python, fftw3, PNG/JPEG)&lt;/li&gt;
&lt;li&gt;it does not use CMake despite that being the obvious intent&lt;/li&gt;
&lt;li&gt;it produces a monolithic output&lt;/li&gt;
&lt;li&gt;it's not ROOT 6&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
The goal here is to write a Nix package that fixes these issues while learning what are nixpkgs "best practices".  
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline3"&gt;
&lt;h3 id="orgheadline3"&gt;&lt;span class="section-number-3"&gt;1.1&lt;/span&gt; Other ROOT Packaging&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;/div&gt;&lt;div class="outline-4" id="outline-container-orgheadline1"&gt;
&lt;h4 id="orgheadline1"&gt;&lt;span class="section-number-4"&gt;1.1.1&lt;/span&gt; Modular builds&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-1-1"&gt;
&lt;p&gt;
ROOT itself is designed with a high degree of modularity both in terms of compile-time and run-time variants as well as providing an explicit plug-in system.  This modularity can be preserved to give the end-user flexibility in which parts of ROOT to install, and more importantly, what dependencies they must be satisfied.
&lt;/p&gt;
&lt;p&gt;
ROOT comes with support for building Debian and Red Hat packages, (Christian Holm Christensen).  The same system builds packages for both distributions and the results are various modular packages relying on the distro's native dependency resolution system.  The packaging system lives in the ROOT source under the &lt;code&gt;build/package/&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
It is desired that Nix packaging extend this existing packaging system or at the very least embrace its strategy.  
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-4" id="outline-container-orgheadline2"&gt;
&lt;h4 id="orgheadline2"&gt;&lt;span class="section-number-4"&gt;1.1.2&lt;/span&gt; Monolithic builds&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-1-2"&gt;
&lt;p&gt;
It's typical for individuals, experiments or collectives to build ROOT from source tailored to what they need.  Instead of the modular approach of the built-in packaging they simply target the necessary sub-set of features and call the whole thing "ROOT".  This means one person's "ROOT" is not another person's, even if it's the same version.
&lt;/p&gt;
&lt;p&gt;
This is find unless these variants are to be somehow managed together, such as in a HEP-wide packaging system.  Going this route requires identifiers (Fermilab calls them "qualifiers") to be invented.  Since ROOT has multiple, orthogonal build choices there is a vast number of variants to cover all combinations.  Consider:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;language bindings (python, r, ruby, and maybe "go" one day)&lt;/li&gt;
&lt;li&gt;database support (sqlite, MySQL, postgresql, oracle)&lt;/li&gt;
&lt;li&gt;optional xrootd support&lt;/li&gt;
&lt;li&gt;optional proof support&lt;/li&gt;
&lt;li&gt;optional pythia support (v6 or v8)&lt;/li&gt;
&lt;li&gt;optional gsl support&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
There are more, but this is already enough to provide for hundreds of combinations.  This alone is not manageable.  If multiple compilers are to be supported things get even worse.  And, of course, new versions of ROOT are coming out so building out this complexity is an ongoing affair.
&lt;/p&gt;
&lt;p&gt;
One way to avoid these explosive combinatorics is with a targeted-monolithic strategy where a select few points in this multi-dimensional space are chosen for building.  One negative consequence of this is to marginalize away any groups that require unsupported combinations.  Only combinations deemed worthy by central build services are created.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2" id="outline-container-orgheadline12"&gt;
&lt;h2 id="orgheadline12"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Initial build notes&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
These are the steps to a monolithic ROOT 6 build in Nix, targeting just one of the combinations described above.
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline5"&gt;
&lt;h3 id="orgheadline5"&gt;&lt;span class="section-number-3"&gt;2.1&lt;/span&gt; Starting out&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;p&gt;
It's recommended to fork &lt;code&gt;NixOS/nixpkgs&lt;/code&gt; in GitHub so I work out of that as &lt;code&gt;origin&lt;/code&gt;.
&lt;/p&gt;
&lt;pre class="example"&gt;
$ cd /srv/nix
$ git clone https://github.com/brettviren/nixpkgs.git
&lt;/pre&gt;
&lt;p&gt;
Now to pick a name and location in nixpkgs.  The repository is organized by some category system which seems to have good intention but is actually not well suited to finding a good home for ROOT and mostly just serves to confound my attempts to find packages.
In any case, the existing ROOT 5 package is at:
&lt;/p&gt;
&lt;pre class="example"&gt;
$ find nixpkgs -name root
nixpkgs/pkgs/applications/science/misc/root
&lt;/pre&gt;
&lt;p&gt;
ROOT is used outside of science (a little) and I wouldn't call Physics "misc" given that it's the basis of all science (mathematicians, you be quiet).  ROOT is also not predominantly an "application" (&lt;code&gt;root.exe&lt;/code&gt; is just a few dozen lines of code).  Also in nixpkgs is:
&lt;/p&gt;
&lt;pre class="example"&gt;
$ find nixpkgs -name geant4
nixpkgs/pkgs/development/libraries/physics/geant4
&lt;/pre&gt;
&lt;p&gt;
That seems like a more appropriate location.
Also, the name ROOT is a really horribly generic one.  To distinguish it somewhat I'll pick &lt;code&gt;rootsys&lt;/code&gt; and put it as a sister to &lt;code&gt;geant4&lt;/code&gt;.
&lt;/p&gt;
&lt;pre class="example"&gt;
$ emacs nixpkgs/pkgs/development/libraries/physics/rootsys/default.nix
&lt;/pre&gt;
&lt;p&gt;
Also, must add to 
&lt;code&gt;nixpkgs/pkgs/top-level/all-packages.nix&lt;/code&gt;.
&lt;/p&gt;
&lt;pre class="example"&gt;
# for now, minimal
rootsys = callPackage ../development/libraries/physics/rootsys {
};
&lt;/pre&gt;
&lt;p&gt;
The build environment always starts with this:
&lt;/p&gt;
&lt;pre class="example"&gt;
$ proot -b /srv/nix/nix-1.9-x86_64-linux/:/nix bash -l
$ source $HOME/.nix-profile/etc/profile.d/nix.sh
$ cd /src/nix
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline6"&gt;
&lt;h3 id="orgheadline6"&gt;&lt;span class="section-number-3"&gt;2.2&lt;/span&gt; Getting the source&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-2"&gt;
&lt;p&gt;
To start, let's get a recent release of ROOT6 source on disk and in an environment to build it.
&lt;/p&gt;
&lt;pre class="example"&gt;
$ nix-prefetch-url http://root.cern.ch/download/root_v6.04.02.source.tar.gz
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   343  100   343    0     0   1625      0 --:--:-- --:--:-- --:--:--  1633
100 94.6M  100 94.6M    0     0  5841k      0  0:00:16  0:00:16 --:--:-- 7231k
path is ‘/nix/store/bbfq8x7hmk521xspxc1iv0b7r26rcgsa-root_v6.04.02.source.tar.gz’
16irxlpl5xirz4v5mnnfs672j6v1j21lmf4xjrjzabjrllvmwhc1
&lt;/pre&gt;
&lt;p&gt;
Type that in to the recipe (see &lt;code&gt;ba216cd89f4d434167a24090e078dd69ce8d1ed3&lt;/code&gt;) and test:
&lt;/p&gt;
&lt;pre class="example"&gt;
$ nix-build /srv/nix/nixpkgs --pure -A rootsys
&lt;/pre&gt;
&lt;p&gt;
It should download, unpack, try to patch, run configure (thanks to the existence of ROOT's fake autoconf script) and then fail.
&lt;/p&gt;
&lt;p&gt;
Can also exercise these first bits by hand:
&lt;/p&gt;
&lt;pre class="example"&gt;
$ nix-shell --pure -A rootsys /srv/nix/nixpkgs
$ cd /srv/nix
$ unpackPhase
$ ls root-6.04.02/
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline7"&gt;
&lt;h3 id="orgheadline7"&gt;&lt;span class="section-number-3"&gt;2.3&lt;/span&gt; Initial CMake'ing&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-3"&gt;
&lt;p&gt;
Next is to configure the source with CMake.  Nix cues off of the existence of ROOT's &lt;code&gt;configure&lt;/code&gt; script so that needs removal.  That is done by writing a little shell fragment and setting it to the &lt;code&gt;preConfigure&lt;/code&gt; variable. 
&lt;/p&gt;
&lt;p&gt;
The CMake step can be done by hand like:
&lt;/p&gt;
&lt;pre class="example"&gt;
$ nix-shell --pure -A rootsys /srv/nix/nixpkgs
$ cd /srv/nix/root-6.04.02
$ cmakeConfigurePhase
&lt;/pre&gt;
&lt;p&gt;
It' s a mystery to me how the &lt;code&gt;cmakeConfigurePhase&lt;/code&gt; instead of the default &lt;code&gt;configurePhase&lt;/code&gt; gets run for you when a &lt;code&gt;genericBuild&lt;/code&gt; is done, but it will.  
&lt;/p&gt;
&lt;p&gt;
At this point, this will fail as we do not tell the environment about any packages, in particular X11.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline8"&gt;
&lt;h3 id="orgheadline8"&gt;&lt;span class="section-number-3"&gt;2.4&lt;/span&gt; Specifying first dependency: ZLib&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-4"&gt;
&lt;p&gt;
Let's keep the CMake step failing on X11 for a while, just to keep things failing fast.  Instead, focus on supplying the ZLib dependency:
&lt;/p&gt;
&lt;pre class="example"&gt;
-- Looking for ZLib
-- Could NOT find ZLIB (missing:  ZLIB_LIBRARY ZLIB_INCLUDE_DIR) 
-- Zlib not found. Switching on builtin_zlib option
&lt;/pre&gt;
&lt;p&gt;
Find out how ZLib is spelled:
&lt;/p&gt;
&lt;pre class="example"&gt;
$ nix-env -qa '.*zlib.*'
...
zlib-1.2.8
zlib-static-1.2.8
&lt;/pre&gt;
&lt;p&gt;
Add &lt;code&gt;zlib&lt;/code&gt; to the arguments to the function in &lt;code&gt;default.nix&lt;/code&gt; and &lt;code&gt;buildInputs&lt;/code&gt;.
&lt;/p&gt;
&lt;pre class="example"&gt;
$ nix-shell /srv/nix/nixpkgs --pure -A rootsys 
$ cd /srv/nix/root-6.04.02
$ rm -rf build
$ cmakeConfigurePhase
...
-- Looking for ZLib
-- Found ZLIB: /nix/store/az2scrkb88l2q09xa0g6lpbv2mh8lxjl-zlib-1.2.8/lib/libz.so (found version "1.2.8")
&lt;/pre&gt;
&lt;p&gt;
It is necessary to re-start the &lt;code&gt;nix-shell&lt;/code&gt; to pick up the addition of &lt;code&gt;zlib&lt;/code&gt; as reflected in the environment and delete the prior &lt;code&gt;build/&lt;/code&gt; dir so have CMake recheck.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline9"&gt;
&lt;h3 id="orgheadline9"&gt;&lt;span class="section-number-3"&gt;2.5&lt;/span&gt; More dependencies&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-5"&gt;
&lt;p&gt;
Keep repeating the above to provide dependencies.  For many things, ROOT provides the dubious option to build a dependency using source it provides.  The strategy I take is to prefer system packages. 
&lt;/p&gt;
&lt;p&gt;
To iterate, adding more to the &lt;code&gt;default.nix&lt;/code&gt; and testing one can use &lt;code&gt;nix-shell&lt;/code&gt; as above repeating the &lt;code&gt;cmakeConfigurePhase&lt;/code&gt; script or from outside the &lt;code&gt;nix-shell&lt;/code&gt; do:
&lt;/p&gt;
&lt;pre class="example"&gt;
$ nix-build /srv/nix/nixpkgs --pure -A rootsys [-K]
...
note: keeping build directory ‘/tmp/nix-build-rootsys-6.04.02.drv-0’
&lt;/pre&gt;
&lt;p&gt;
This repeats unpacking the source, does it's business in &lt;code&gt;/tmp&lt;/code&gt; and cleans up at the end, even on failure unless the &lt;code&gt;-K&lt;/code&gt; is given.  If the dregs of the last are kept around, subsequent runs will increment that trailing number.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline10"&gt;
&lt;h3 id="orgheadline10"&gt;&lt;span class="section-number-3"&gt;2.6&lt;/span&gt; Final version&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-6"&gt;
&lt;p&gt;
This is the commit &lt;code&gt;4ede6c5da4ada577c6669ebfa851d4d1c72db071&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline11"&gt;
&lt;h3 id="orgheadline11"&gt;&lt;span class="section-number-3"&gt;2.7&lt;/span&gt; ROOT Build problems&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-7"&gt;
&lt;p&gt;
ROOT's CMake build is pretty good but a few things
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;MySQL dependencies fail late in the build due to not finding &lt;code&gt;mysql.h&lt;/code&gt;.  The fix is to add this to CMake's config command (&lt;code&gt;cmakeFlags&lt;/code&gt; variable):&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="example"&gt;
-DMYSQL_CONFIG_EXECUTABLE="{mysql}/bin/mysql_config"
&lt;/pre&gt;
&lt;p&gt;
The patch which is part of the ROOT 5  Nix package is still needed.
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-diff"&gt;&lt;span style="font-weight: bold;"&gt;--- &lt;/span&gt;&lt;span style="font-weight: bold;"&gt;a/cmake/modules/RootBuildOptions.cmake      1969-12-31 20:30:01.000000000 -0330&lt;/span&gt;
&lt;span style="font-weight: bold;"&gt;+++ &lt;/span&gt;&lt;span style="font-weight: bold;"&gt;b/cmake/modules/RootBuildOptions.cmake      2014-01-10 14:09:29.424937408 -0330&lt;/span&gt;
&lt;span style="font-weight: bold;"&gt;@@ -149,7 +149,7 @@&lt;/span&gt;

 #---General Build options----------------------------------------------------------------------
 # use, i.e. don't skip the full RPATH for the build tree
-set(CMAKE_SKIP_BUILD_RPATH  FALSE)
+set(CMAKE_SKIP_BUILD_RPATH  TRUE)
 # when building, don't use the install RPATH already (but later on when installing)
 set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE) 
 # add the automatically determined parts of the RPATH
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>HEP/Nix Packages.</title><link href="http://brettviren.github.io/nix" rel="alternate"></link><updated>2015-12-28T00:00:00-05:00</updated><author><name>Brett Viren</name></author><id>tag:brettviren.github.io,2015-08-15:nix</id><summary type="html">
&lt;div class="outline-2" id="outline-container-orgheadline4"&gt;
&lt;h2 id="orgheadline4"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Nix in a Nut Shell&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
&lt;a href="https://nixos.org/nix/"&gt;Nix&lt;/a&gt; is the package manager used by NixOS and can be used entirely from user space on POSIX'sh OSes.  Its basic design is unique in the realm of software packaging (there is a similar, derived implementation called &lt;a href="http://www.gnu.org/software/guix/"&gt;Guix&lt;/a&gt; which differs only in the configuration language used).  
&lt;/p&gt;
&lt;p&gt;
To begin to understand Nix, it is useful to compare and contrast it to systems which are already familiar to some in the HEP community which is done in the following sections.
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline1"&gt;
&lt;h3 id="orgheadline1"&gt;&lt;span class="section-number-3"&gt;1.1&lt;/span&gt; The Nix Package Store&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
In contrast with other systems, Nix does not interleave the files of a package under a single-rooted file-system hierarchy such as the &lt;a href="http://www.pathname.com/fhs/"&gt;FHS&lt;/a&gt; (ie, the usual &lt;code&gt;/usr/{lib,bin,include}&lt;/code&gt;) like Debian GNU/Linux nor does it  produce isolated bundles which leverage a base file-system hierarchy such as in Mac OS X.  
&lt;/p&gt;
&lt;p&gt;
The Nix &lt;i&gt;package store&lt;/i&gt; contains the directly installed file contents of Nix packages.  It is somewhat similar to  the "&lt;a href="https://www.fnal.gov/docs/products/ups/ReferenceManual/html/overview.html#32926"&gt;product database&lt;/a&gt;" of UPS, the module area of &lt;a href="http://modules.sourceforge.net/"&gt;Environment Modules&lt;/a&gt; and the LCGCMT "externals" area.  Some common features include:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;a well defined root directory containing the files of the installed packages.&lt;/li&gt;
&lt;li&gt;a per-package directory under this root named with identifiers used to later build a working environment.&lt;/li&gt;
&lt;li&gt;an FHS-like layout within each package directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
The Nix &lt;i&gt;package store&lt;/i&gt; differs from these other systems in some important ways:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;There is a &lt;b&gt;single directory root&lt;/b&gt; common among all compatible installations.  The prevailing convention is to place the store under &lt;code&gt;/nix/&lt;/code&gt;.  This must be a mount, not just a symlink.  Other root directory conventions may be chosen but all packages must be built for that mount point.&lt;/li&gt;
&lt;li&gt;While a package's directory is named with the package name, version and other human-oriented identifiers it also contains a cryptographic hash formed from the dependencies required to build that package.&lt;/li&gt;
&lt;li&gt;A package directory is self-contained in that all files associated with the installation of that package reside in the directory (the others allow for, and in the case of UPS in practice, violate this).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
These unique aspects of the Nix package store allow for a number of beneficial features:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Packages can be shared in binary form with robust dependency resolution.&lt;/li&gt;
&lt;li&gt;Binary executable and library files do not need environment variables to locate dependencies due to the common path.&lt;/li&gt;
&lt;li&gt;Packages are precisely reproducible from source and binary can be validated.  This allows for a wide pool of package builders to share binary packages with a wide community of users.  This additional level of verification and validity is fully lacking in any other packaging system known to be used in HEP.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline2"&gt;
&lt;h3 id="orgheadline2"&gt;&lt;span class="section-number-3"&gt;1.2&lt;/span&gt; User Environment&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;p&gt;
Another unique aspect of Nix packages is how a user environment is produced.  To speak generally, a user environment is created as some aggregation or view of a larger package store.  This aggregation can be performed in a number of ways and typically relies partly on environment variables and the file system.
&lt;/p&gt;
&lt;p&gt;
In the case of conventional GNU/Linux or Mac OS X user environments, the default environment is provided by the FHS-like directory hierarchy typically rooted in &lt;code&gt;/usr&lt;/code&gt; and brief settings of a small number of environment variables such as &lt;code&gt;PATH&lt;/code&gt; to find executable files and relying on conventions "baked" into the loader to find libraries.
&lt;/p&gt;
&lt;p&gt;
The packaging commonly used in HEP layers on top of this OS-default aggregation which relies heavily both on environment variable settings and some file system organization as described in the previous section.  The environment settings typically extend the standard &lt;code&gt;PATH&lt;/code&gt;-like variables, typically with one additional component for every package or project being aggregated.  Many package require their own &lt;code&gt;PATH&lt;/code&gt;-like variables (eg &lt;code&gt;PYTHONPATH&lt;/code&gt;) or single-location variables (eg ROOT's &lt;code&gt;ROOTSYS&lt;/code&gt;) to be extended or set.  Also typical is to set one or more "standard" variables for every single package "just in case they might be needed" (eg CMT and UPS set a &lt;code&gt;&amp;lt;PACKAGE&amp;gt;_DIR&lt;/code&gt; variable).
&lt;/p&gt;
&lt;p&gt;
Heavily relying on environment variable-based aggregation is problematic for a few reasons:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;it is ephemeral, existing only in the shell session.&lt;/li&gt;
&lt;li&gt;its construction is ill-defined, depending on what setup scripts were run and in what order.&lt;/li&gt;
&lt;li&gt;its often confusing to users.&lt;/li&gt;
&lt;li&gt;it can lead to inconsistencies, particularly during development.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Nix takes a more file-system-oriented approach and NixOS is entirely based on this approach such that the entire OS-level environment is subsumed.  With Nix, a user may have one or more "profiles".  Each profile provides the files for the working environment and which are aggregated into a single directory that follows an FSH-like convention.  The file-system hierarchy in the profile is recorded through symbolic links into the Nix &lt;i&gt;package store&lt;/i&gt;.  
&lt;/p&gt;
&lt;p&gt;
This file-system aggregation has a number of benefits:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;the profile directory provides a tangible record of the user environment.&lt;/li&gt;
&lt;li&gt;user environment variables require minimal modification (single entry added to &lt;code&gt;PATH&lt;/code&gt;-like variables).&lt;/li&gt;
&lt;li&gt;profiles can be populated in an indirect manner allowing site-wide or group-wide release definitions (eg, defining through a "pro", "dev" etc pattern, or through release definitions).&lt;/li&gt;
&lt;li&gt;atomic upgrades and rollback patterns are trivial.&lt;/li&gt;
&lt;li&gt;profile directories at a site may be automatically queried by site administrators to determine what packages are actually in use and which can be safely purged.&lt;/li&gt;
&lt;li&gt;profiles are amenable to &lt;code&gt;chroot&lt;/code&gt; or similar containment.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline3"&gt;
&lt;h3 id="orgheadline3"&gt;&lt;span class="section-number-3"&gt;1.3&lt;/span&gt; Package Definition&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-3"&gt;
&lt;p&gt;
Another way in which Nix is unique among the systems in use in HEP is that it is comprehensive in providing for configuration management, build automation, package distribution and installation and user environment management.  None of the other systems managed, by themselves, cover this necessary ground.  
&lt;/p&gt;
&lt;p&gt;
Nix package definitions are short text files in the Nix packaging language.  They provide parameters interpreted by functionality built in to Nix or provide any special shell commands needed for less common build methods.  These specifications are highly portable due to leveraging a well characterized build environment - that of all the other Nix packages.  This allows for a huge amount of shared effort not obtainable by other systems.  For example, one individual or small group can maintain the Nix package specification for ROOT and the entire world can benefit from its use. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2" id="outline-container-orgheadline6"&gt;
&lt;h2 id="orgheadline6"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Impedance mismatches between Nix and HEP&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
At the heart of Nix is the &lt;i&gt;package store&lt;/i&gt; and its contents are produced based on the other packages it already contains.  Because of the hashing mechanism the location of this store is "baked" into the package names and binaries are built against their dependencies located under the &lt;i&gt;package store&lt;/i&gt;.  
&lt;/p&gt;
&lt;p&gt;
The implication of this is that any package can be considered part of a "package realm" defined by the mount point.  An apparently trivial change of this mount point requires rebuilding all packages.  The benefit of accepting this limitation is that packages need not be &lt;i&gt;relocatable&lt;/i&gt;&lt;sup&gt;&lt;a class="footref" href="#fn.1" id="fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; and that binaries built by one individual can be shared and need not be built by any other individual using the same mount point.
&lt;/p&gt;
&lt;p&gt;
For NixOS installations this limitation is invisible as the system itself relies on the &lt;i&gt;package store&lt;/i&gt; to be found at the &lt;code&gt;/nix&lt;/code&gt; root.  However, essentially all HEP computer installations do not run NixOS and thus a common Nix &lt;i&gt;package store&lt;/i&gt; mount must be created in context of whatever native policies exist.  The main issues with this are:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;many HEP users do not have administrator privileges on the computer systems they use.&lt;/li&gt;
&lt;li&gt;HEP clusters (and the wider Grid) have local policies driven by various forces and negotiations are needed to established a shared &lt;code&gt;/nix&lt;/code&gt; mount.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
There are two known solutions to this issue.
&lt;/p&gt;
&lt;p&gt;
The first is to give up on a global &lt;i&gt;package store&lt;/i&gt; mount point and leave it to each installation to pick one and simply spend the CPU time to populate the store by building packages from source.  Some increased coverage could be had by exploiting the global AFS namespace.  CVMFS is becoming more prevalent and with it another common convention for mount points is possible.  Both provide a delivery mechanism although that is redundant with the one that Nix also provides.
&lt;/p&gt;
&lt;p&gt;
The other solution is to use the functionality of &lt;a href="http://proot.me/"&gt;PRoot&lt;/a&gt; which is a user-level &lt;code&gt;chroot&lt;/code&gt; container mechanism.  It is a light weight way to effectively produce a "virtual" mount in the context of a single job.  The globally &lt;code&gt;/nix&lt;/code&gt; mount can then be provided even if it may reside in a user's home directory, or a group location or otherwise not directly mounted.  This virtual mount is achieved through some intercepted system calls and so some small performance overhead is suffered.  Quantifying this overhead would be a necessary task to accepting this otherwise good solution.
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline5"&gt;
&lt;h3 id="orgheadline5"&gt;&lt;span class="section-number-3"&gt;2.1&lt;/span&gt; Issues with existing HEP build systems&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;p&gt;
Some software is resistant to producing Nix packages.  Because Nix is designed to build from source any software that is difficult to build from source is resistant to using in a Nix based system.  
&lt;/p&gt;
&lt;p&gt;
Of some small importance to HEP is proprietary, binary-only packages.  To deal with this, the "source" of the build is the provided binaries.  Nix has developed PatchELF to rewrite compiled-in paths to match the &lt;i&gt;package store&lt;/i&gt; path, allowing the result to be truly relocatable.
&lt;/p&gt;
&lt;p&gt;
More problematic are existing large, important software projects which have grown intricately intertwined with local computing infrastructure and installation patterns.  An example is the &lt;code&gt;UPS/cetbuilttools&lt;/code&gt; based software largely developed at Fermilab for US HEP Intensity Frontier experiments.  It is effectively not packages are not possible to build these package from "first principles" and instead they require, down to their low-level package build configuration and source code, intricate intertwining with the end-user environment management system (UPS).  As a consequence, they are built for a small number of OS platforms and can only be built for a Nix-based system after some significant effort and buy-in by Fermilab.   
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2" id="outline-container-orgheadline7"&gt;
&lt;h2 id="orgheadline7"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Plan for a Prototype&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
To determine if Nix can be used in a practical sense in HEP, some prototyping is the first plan of action.  The pat to this is:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;Use the PRoot approach to provide &lt;code&gt;/nix&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Work on package specification for common HEP packages, starting with ROOT&lt;sup&gt;&lt;a class="footref" href="#fn.2" id="fnr.2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;Include releases of experiment-level package.&lt;/li&gt;
&lt;li&gt;Develop methods and helper tools to develop on experiment packages.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2" id="outline-container-orgheadline9"&gt;
&lt;h2 id="orgheadline9"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; See also&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="./root5.html"&gt;notes on existing ROOT5 packaging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="./root6.html"&gt;notes creating new ROOT6 packaging&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline8"&gt;
&lt;h3 id="orgheadline8"&gt;&lt;span class="section-number-3"&gt;4.1&lt;/span&gt; Links&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-4-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://christopherpoole.github.io/My-workflow-for-adding-packages-to-nixpkgs/"&gt;http://christopherpoole.github.io/My-workflow-for-adding-packages-to-nixpkgs/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;
&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a class="footnum" href="#fnr.1" id="fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara"&gt;&lt;p class="footpara"&gt;
The term "relocatable" is used in some systems like UPS.  There, it takes a weak definition as the relocation is only possible through setting user environment variables.  Nix provides a PatchELF tool with which one can produce binary executable and library files which can be truly relocated.  It works by rewriting the path strings that are compiled into the binaries.  If rewritten to their relocated locations the environment setting that must otherwise be modified need not be.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a class="footnum" href="#fnr.2" id="fn.2"&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara"&gt;&lt;p class="footpara"&gt;
Someone has already packaged a recent ROOT 5 for Nix but its build happens to be failing at the time of writing.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</summary><category term="packaging"></category><category term="unix"></category><category term="hsf"></category></entry><entry><title>Using PGP With GnuPG</title><link href="http://brettviren.github.io/gnupg" rel="alternate"></link><updated>2015-12-28T00:00:00-05:00</updated><author><name>Brett Viren</name></author><id>tag:brettviren.github.io,2015-07-07:gnupg</id><summary type="html">
&lt;p&gt;
In 2005 I made a &lt;a href="http://pgp.mit.edu/pks/lookup?op=vindex&amp;amp;search=0x122C47D99D1D282C"&gt;PGP Key&lt;/a&gt;.  This note documents various aspects of interacting with my key.
&lt;/p&gt;
&lt;div class="outline-2" id="outline-container-orgheadline1"&gt;
&lt;h2 id="orgheadline1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Keys&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
My new 2015 key.  See next section for how I upgraded.
&lt;/p&gt;
&lt;pre class="example"&gt;
pub   4096R/97A51B47 2015-07-08
      Key fingerprint = F37E 5F67 394D 3592 5D37  EE66 5B00 71E0 97A5 1B47
uid                  Brett Viren &amp;lt;bv@bnl.gov&amp;gt;
sub   4096R/3F58C5C6 2015-07-08
&lt;/pre&gt;
&lt;p&gt;
My initial 2005 key.
&lt;/p&gt;
&lt;pre class="example"&gt;
$ gpg --fingerprint --list-keys 9D1D282C
pub   1024D/9D1D282C 2005-12-20
      Key fingerprint = 04A6 309A D560 D339 D027  2924 122C 47D9 9D1D 282C
uid                  Brett Viren &amp;lt;bv@bnl.gov&amp;gt;
sub   2048g/C26A51C6 2005-12-20
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2" id="outline-container-orgheadline2"&gt;
&lt;h2 id="orgheadline2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Key server&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
I'm &lt;a href="https://help.riseup.net/en/security/message-security/openpgp/best-practices#selecting-a-keyserver-and-configuring-your-machine-to-refresh-your-keyring"&gt;told&lt;/a&gt; I should use an sks keyserver pool which is authenticated by a CA cert.
&lt;/p&gt;
&lt;pre class="example"&gt;
$ wget https://sks-keyservers.net/sks-keyservers.netCA.pem
$ openssl x509 -fingerprint -in sks-keyservers.netCA.pem|head -1
SHA1 Fingerprint=79:1B:27:A3:8E:66:7F:80:27:81:4D:4E:68:E7:C4:78:A4:5D:5A:17
&lt;/pre&gt;
&lt;p&gt;
&lt;code&gt;gpg.conf&lt;/code&gt;:
&lt;/p&gt;
&lt;pre class="example"&gt;
keyserver hkps://hkps.pool.sks-keyservers.net
keyserver-options ca-cert-file=~/.gnupg/CA/sks-keyservers.netCA.pem
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2" id="outline-container-orgheadline8"&gt;
&lt;h2 id="orgheadline8"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Upgrading&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
The 2005 key is a 1024D.  I want a larger 4096R one.  
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline3"&gt;
&lt;h3 id="orgheadline3"&gt;&lt;span class="section-number-3"&gt;3.1&lt;/span&gt; Getting started&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-1"&gt;
&lt;p&gt;
I mostly followed &lt;a href="http://ekaia.org/blog/2009/05/10/creating-new-gpgkey/"&gt;this post&lt;/a&gt; which seems to be what everyone follows.
It starts by recommending a few &lt;code&gt;gpg.conf&lt;/code&gt; settings.  However, it
looks like &lt;code&gt;SHA512&lt;/code&gt; is more common today that the &lt;code&gt;SHA256&lt;/code&gt; that this
2009 blog post recomends.
&lt;/p&gt;
&lt;pre class="example"&gt;
# default-key  9D1D282C
personal-digest-preferences SHA512
cert-digest-algo SHA512
default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline4"&gt;
&lt;h3 id="orgheadline4"&gt;&lt;span class="section-number-3"&gt;3.2&lt;/span&gt; Creating the new key&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-2"&gt;
&lt;p&gt;
Thanks &lt;a href="http://keyring.debian.org/creating-key.html"&gt;Debian&lt;/a&gt;.
Create the key with &lt;code&gt;gpg --gen-key&lt;/code&gt; selecting option:
&lt;/p&gt;
&lt;pre class="example"&gt;
$ gpg --gen-key
...
   (1) RSA and RSA (default)
&lt;/pre&gt;
&lt;p&gt;
No comment as that's apparently considered "bad".  Meet the new me:
&lt;/p&gt;
&lt;pre class="example"&gt;
pub   4096R/97A51B47 2015-07-08
      Key fingerprint = F37E 5F67 394D 3592 5D37  EE66 5B00 71E0 97A5 1B47
uid                  Brett Viren &amp;lt;bv@bnl.gov&amp;gt;
sub   4096R/3F58C5C6 2015-07-08
&lt;/pre&gt;
&lt;p&gt;
Make it default in &lt;code&gt;gpg.conf&lt;/code&gt;
&lt;/p&gt;
&lt;pre class="example"&gt;
default-key  97A51B47
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline5"&gt;
&lt;h3 id="orgheadline5"&gt;&lt;span class="section-number-3"&gt;3.3&lt;/span&gt; Add my Gmail identity&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-3"&gt;
&lt;p&gt;
I try to keep my work identity tied to my &lt;code&gt;bv@bnl.gov&lt;/code&gt; email address
and all the rest tied to my &lt;code&gt;brett.viren@gmail.com&lt;/code&gt; address.  I don't
currently have GPG well integrated with Gmail, even when sending via
GNUS, but I follow the guide and add this identity nonetheless.
&lt;/p&gt;
&lt;pre class="example"&gt;
$ gpg --edit-key 97A51B47

gpg&amp;gt; adduid
Real name: Brett Viren
Email address: brett.viren@gmail.com
Comment: 
You selected this USER-ID:
    "Brett Viren &amp;lt;brett.viren@gmail.com&amp;gt;"

Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? o

You need a passphrase to unlock the secret key for
user: "Brett Viren &amp;lt;bv@bnl.gov&amp;gt;"
4096-bit RSA key, ID 97A51B47, created 2015-07-08


pub  4096R/97A51B47  created: 2015-07-08  expires: never       usage: SC  
                     trust: ultimate      validity: ultimate
sub  4096R/3F58C5C6  created: 2015-07-08  expires: never       usage: E   
[ultimate] (1)  Brett Viren &amp;lt;bv@bnl.gov&amp;gt;
[ unknown] (2). Brett Viren &amp;lt;brett.viren@gmail.com&amp;gt;

gpg&amp;gt; save
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline6"&gt;
&lt;h3 id="orgheadline6"&gt;&lt;span class="section-number-3"&gt;3.4&lt;/span&gt; Sign new with old&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-4"&gt;
&lt;p&gt;
This is so that the new me recognizes the old me.
&lt;/p&gt;
&lt;pre class="example"&gt;
$ gpg --default-key 9D1D282C --sign-key 97A51B47
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline7"&gt;
&lt;h3 id="orgheadline7"&gt;&lt;span class="section-number-3"&gt;3.5&lt;/span&gt; Transition statement&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-5"&gt;
&lt;p&gt;
It is recommended to write a transition statement and sign it with both keys.
The key components of such a statement are apparently:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Affirm the transition is desired.&lt;/li&gt;
&lt;li&gt;List the key ID, date and fingerprint for the old and the new keys.&lt;/li&gt;
&lt;li&gt;State what you request others do with this transition information.&lt;/li&gt;
&lt;li&gt;For convenience of others, provide instructions on how to carry out
the request.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
My statements:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="./transition-2005-to-2015.txt"&gt;./transition-2005-to-2015.txt&lt;/a&gt;, &lt;a href="./transition-2005-to-2015.old.txt"&gt;signed by old key&lt;/a&gt;, &lt;a href="./transition-2005-to-2015.new.txt"&gt;signed by new key&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2" id="outline-container-orgheadline9"&gt;
&lt;h2 id="orgheadline9"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; Subkeys&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
It seems that when the world wants to know about subkeys the world turns to the &lt;a href="https://wiki.debian.org/Subkeys"&gt;Debian subkey wiki page&lt;/a&gt;.  Here is a more &lt;a href="https://alexcabal.com/creating-the-perfect-gpg-keypair/"&gt;coloquial coverage&lt;/a&gt; of the issue with some background.  Lots of good walk throughs at &lt;a href="https://help.ubuntu.com/community/GnuPrivacyGuardHowto"&gt;this ubuntu wiki page&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
&lt;a href="https://www.void.gr/kargig/blog/2013/12/02/creating-a-new-gpg-key-with-subkeys/"&gt;This here post&lt;/a&gt; gives the run down on the key types that &lt;code&gt;gpg -[kK]&lt;/code&gt; shows
&lt;/p&gt;
&lt;dl class="org-dl"&gt;
&lt;dt&gt;&lt;code&gt;sec&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;SECret key&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;ssb&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Secret SuBkey&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;pub&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;PUBlic key&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;sub&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;public SUBkey&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;
Using &lt;code&gt;gpg --edit-key&lt;/code&gt; prints a usage code
&lt;/p&gt;
&lt;dl class="org-dl"&gt;
&lt;dt&gt;&lt;code&gt;S&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;signing&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;C&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;certifying other signatures&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;E&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;encrypting&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;A&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;authentication&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;
I'm going to start using &lt;a href="../pass"&gt;pass&lt;/a&gt; and I (think I) want to use a dedicated encrypting subkey.
&lt;/p&gt;
&lt;pre class="example"&gt;
$ gpg --edit-key 0x5B0071E097A51B47
gpg&amp;gt; addkey
   ...
   (6) RSA (encrypt only)
Your selection? 6
What keysize do you want? (2048) 4096
Please specify how long the key should be valid.
         0 = key does not expire
...
Key is valid for? (0) 0
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="crypto"></category><category term="gpg"></category><category term="notes"></category><category term="cmdline"></category></entry><entry><title>Scope out my new i7 PC</title><link href="http://brettviren.github.io/haiku-i7-system" rel="alternate"></link><updated>2015-12-28T00:00:00-05:00</updated><author><name>Brett Viren</name></author><id>tag:brettviren.github.io,2014-06-28:haiku-i7-system</id><summary type="html">
&lt;p&gt;
After a long time using ever aging computers at home I built a new workstation.
&lt;/p&gt;
&lt;div class="outline-2" id="outline-container-orgheadline1"&gt;
&lt;h2 id="orgheadline1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Specs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;dl class="org-dl"&gt;
&lt;dt&gt;OS&lt;/dt&gt;&lt;dd&gt;Ubuntu 15.04&lt;/dd&gt;
&lt;dt&gt;mobo&lt;/dt&gt;&lt;dd&gt;&lt;a href="http://www.newegg.com/Product/Product.aspx?Item=N82E16813157500"&gt;ASRock Z97 Extreme6&lt;/a&gt; (10 SATA)&lt;/dd&gt;
&lt;dt&gt;CPU&lt;/dt&gt;&lt;dd&gt;&lt;a href="http://www.newegg.com/Product/Product.aspx?Item=N82E16819116901"&gt;i7-4770K at 3.5GHz&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;RAM&lt;/dt&gt;&lt;dd&gt;&lt;a href="http://www.newegg.com/Product/Product.aspx?Item=N82E16820231560"&gt;2x8GB G.SKILL Ares 240-pin DDR3&lt;/a&gt; (two slots still available)&lt;/dd&gt;
&lt;dt&gt;GPU&lt;/dt&gt;&lt;dd&gt;&lt;a href="http://www.newegg.com/Product/Product.aspx?Item=N82E16814487024"&gt;EVGA 02G-P4-3753-KR GeForce GTX 750 Ti Superclocked&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;case&lt;/dt&gt;&lt;dd&gt;&lt;a href="http://www.newegg.com/Product/Product.aspx?Item=N82E16811139022"&gt;Corsair Carbide Air 540 Black&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;HDD&lt;/dt&gt;&lt;dd&gt;2x &lt;a href="http://www.newegg.com/Product/Product.aspx?Item=N82E16822148844"&gt;Seagate Barracuda 7200.14 ST3000DM001 3TB&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;SDD&lt;/dt&gt;&lt;dd&gt;&lt;a href="http://www.newegg.com/Product/Product.aspx?Item=N82E16820171646"&gt;SanDisk SDSSDP-128G-G25&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;PS&lt;/dt&gt;&lt;dd&gt;&lt;a href="http://www.newegg.com/Product/Product.aspx?Item=N82E16817139058"&gt;CORSAIR CSM CS450M 450W&lt;/a&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;
Total cost was just over 1.1k.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2" id="outline-container-orgheadline8"&gt;
&lt;h2 id="orgheadline8"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Some benchmarking&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;/div&gt;&lt;div class="outline-3" id="outline-container-orgheadline6"&gt;
&lt;h3 id="orgheadline6"&gt;&lt;span class="section-number-3"&gt;2.1&lt;/span&gt; Compare Building ROOT on SSD and HDD&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;dl class="org-dl"&gt;
&lt;dt&gt;SSD&lt;/dt&gt;&lt;dd&gt;&lt;/dd&gt;
&lt;dt&gt;HDD&lt;/dt&gt;&lt;dd&gt;Seagate&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="outline-4" id="outline-container-orgheadline2"&gt;
&lt;h4 id="orgheadline2"&gt;&lt;span class="section-number-4"&gt;2.1.1&lt;/span&gt; Download speed.&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-1-1"&gt;
&lt;p&gt;
Obviously dominated by network.
&lt;/p&gt;
&lt;pre class="example"&gt;
hdd$ time wget ftp://root.cern.ch/root/root_v5.34.18.source.tar.gz
real	1m3.200s
user	0m0.325s
sys	0m1.368s

ssd$ time wget ftp://root.cern.ch/root/root_v5.34.18.source.tar.gz
real	1m1.630s
user	0m0.313s
sys	0m1.325s
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-4" id="outline-container-orgheadline3"&gt;
&lt;h4 id="orgheadline3"&gt;&lt;span class="section-number-4"&gt;2.1.2&lt;/span&gt; Unpack&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-1-2"&gt;
&lt;pre class="example"&gt;
hdd$ sync; sync; sync
hdd$ time (tar -xvf root_v5.34.18.source.tar.gz ; sync)
real	0m2.664s
user	0m0.995s
sys	0m0.318s


ssd$ sync; sync; sync
ssd$ time (tar -xvf root_v5.34.18.source.tar.gz ; sync)
real	0m1.894s
user	0m0.982s
sys	0m0.314s
&lt;/pre&gt;
&lt;p&gt;
Trying this a second time shows these times are probably good to the first decimal place.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-4" id="outline-container-orgheadline4"&gt;
&lt;h4 id="orgheadline4"&gt;&lt;span class="section-number-4"&gt;2.1.3&lt;/span&gt; Configure&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-1-3"&gt;
&lt;p&gt;
Prepare the OS with the slew of build dependencies:
&lt;/p&gt;
&lt;pre class="example"&gt;
$ sudo apt-get build-dep root-system 
$ sudo apt-get install cmake
&lt;/pre&gt;
&lt;p&gt;
Configure using CMake:
&lt;/p&gt;
&lt;pre class="example"&gt;
both$ mkdir build 
both$ cd build
&lt;/pre&gt;
&lt;pre class="example"&gt;
hdd$ sync; sync; sync
hdd$ time cmake ../root -DCMAKE_INSTALL_PREFIX=../install 
real	0m3.530s
user	0m2.707s
sys	0m0.567s

hdd$ sync; sync; sync
hdd$ time cmake ../root -DCMAKE_INSTALL_PREFIX=../install 
real	0m3.284s
user	0m2.773s
sys	0m0.590s
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-4" id="outline-container-orgheadline5"&gt;
&lt;h4 id="orgheadline5"&gt;&lt;span class="section-number-4"&gt;2.1.4&lt;/span&gt; Build&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-1-4"&gt;
&lt;p&gt;
Serial make.  This fails at 71% in &lt;code&gt;libAfterImage&lt;/code&gt;, so just for timing purposes:
&lt;/p&gt;
&lt;pre class="example"&gt;
hdd$ time make
real	18m19.952s
user	17m57.504s
sys	0m53.928s

ssd$ time make
real	18m19.203s
user	17m56.957s
sys	0m53.906s
&lt;/pre&gt;
&lt;p&gt;
Well, that's underwhelming.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline7"&gt;
&lt;h3 id="orgheadline7"&gt;&lt;span class="section-number-3"&gt;2.2&lt;/span&gt; Building ROOT v6&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-2"&gt;
&lt;pre class="example"&gt;
$ time make -j 8
real	13m39.561s
user	97m52.141s
sys	4m17.270s

$ time make install
real	0m4.192s
user	0m2.594s
sys	0m1.592s
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>This site.</title><link href="http://brettviren.github.io/this" rel="alternate"></link><updated>2015-12-28T00:00:00-05:00</updated><author><name>Brett Viren</name></author><id>tag:brettviren.github.io,2014-03-02:this</id><summary type="html">
&lt;p&gt;
This web site has evolved over time.  It is currently written with
Emacs &lt;a href="//orgmode.org"&gt;org-mode&lt;/a&gt;.  It's Org source is exported with &lt;a href="https://github.com/brettviren/orgonpy"&gt;OrgOnPy&lt;/a&gt; and &lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;.
This topic contains notes on how this is done.
&lt;/p&gt;
&lt;div class="outline-2" id="outline-container-orgheadline1"&gt;
&lt;h2 id="orgheadline1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Generalities&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I use Emacs for producing pretty much all of my information "output".
Except for Email (and IRC), I use Org mode to manage pretty much all
my text-based (non-code) output.  The main content that this web site
exposes are "topics" which are formal(ish) notes (like this one) which
I produce to remind myself what I did and for the sake of anyone else
that may be interested.  I will sometimes revise topics after their
initial "publication".
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2" id="outline-container-orgheadline2"&gt;
&lt;h2 id="orgheadline2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Emacs and Org&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
My &lt;a href="https://github.com/brettviren/dot-emacs"&gt;Emacs config&lt;/a&gt; is online.  The &lt;a href="https://github.com/brettviren/dot-emacs/blob/master/init-org.el"&gt;Org initialization&lt;/a&gt; adds to the
&lt;code&gt;org-capture-templates&lt;/code&gt; list so I can start a "&lt;a href="http://orgmode.org/manual/Capture.html"&gt;capture&lt;/a&gt;" of a topic
with &lt;code&gt;C-c c b&lt;/code&gt; or revisit an existing topic with &lt;code&gt;C-c c B&lt;/code&gt;.  
&lt;/p&gt;
&lt;p&gt;
Because a topic may include multiple files, I have this start a
sub-directory for each topic under my topics storage area
(&lt;code&gt;~/org-pub/topics&lt;/code&gt;).
&lt;/p&gt;
&lt;p&gt;
Each new topic is created using a &lt;a href="https://github.com/brettviren/org-pub/blob/master/templates/topic-start.template"&gt;template&lt;/a&gt; which will cause Org to
prompt for various items used later including title, subtitle,
category, tags (note, not same as Org headline tags) as well as
automatically fill some things like the date stamp (interpreted as a
creation date).  It also sets a &lt;code&gt;SETUPFILE&lt;/code&gt; which contains some
minimal, global Org setup.
&lt;/p&gt;
&lt;p&gt;
During authoring I can get a preview of how things look by doing a
local export (eg, &lt;code&gt;C-c C-e l p&lt;/code&gt; for PDF, &lt;code&gt;C-c C-e h h&lt;/code&gt; for HTML).
This export is not what eventually turns into the web page.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2" id="outline-container-orgheadline3"&gt;
&lt;h2 id="orgheadline3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; OrgOnPy&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
Unfortunately, I have never been able to fully grok Elisp and Python
is my preferred scripting language.  So that I may process content in
Org in non-trivial ways I have developed &lt;a href="https://github.com/brettviren/orgonpy"&gt;OrgOnPy&lt;/a&gt;.  It works by running
some Elisp which I did manage to write with a lot of help from the Org
mailing list to get the Org document as an &lt;code&gt;org-element&lt;/code&gt; tree.  It
then breaks some of the circular references that exist in that tree
before using Emacs's &lt;code&gt;json&lt;/code&gt; module to convert it to JSON.  OrgOnPy
provides an &lt;code&gt;org-element&lt;/code&gt;-like tree representation which can then be
used to provide Python objects which are somewhat reminiscent of their
Elisp counterparts.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2" id="outline-container-orgheadline5"&gt;
&lt;h2 id="orgheadline5"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; Pelican&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
Pelican is a static site generator.  It is well designed with fairly
good layering and a plugin system.  HTML is generated from two paths:
the overall structure of the pages is determined by Jinja templates
driven by metadata while the "payload" content is directly converted
from the content source files.
&lt;/p&gt;
&lt;p&gt;
It is the job of the "reader" layer to provide metadata and HTML
content.  The "reader" is an explicit layer in the Pelican design and
it comes with readers that support Markdown, rST and AsciiDoc.  One
may also provide the "reader" as a plugin which is what OrgOnPy does
to add support for source files in Org markup.  The &lt;a href="https://github.com/brettviren/orgonpy/tree/master/pelican-plugin/orgonpy"&gt;OrgOnPy Pelican
reader&lt;/a&gt; is heavily inspired by &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/org_reader"&gt;&lt;code&gt;org_reader&lt;/code&gt;&lt;/a&gt; which is part of the
Pelican plugin collection.  OrgOnPy also provides a &lt;a href="https://github.com/brettviren/orgonpy/tree/master/pelican-plugin/extract_toc"&gt;modified version
of the &lt;code&gt;extract_toc&lt;/code&gt;&lt;/a&gt; plugin also from the Pelican plugin collection.
&lt;/p&gt;
&lt;p&gt;
Pelican has a number of "themes" which provide for HTML structure and
CSS styling.  For the most part a theme is defined at a layer boundary
so that most themes can be interchanged without changes to the source
content files.  I made a &lt;a href="./pelican-themes.html"&gt;a survey of Pelican themes&lt;/a&gt; ultimately
settling on &lt;a href="https://github.com/talha131/pelican-elegant/"&gt;elegant&lt;/a&gt; as being closest in structure and functionality to
what I wanted.  Inevitably I wanted to tweak so I have lightly &lt;a href="https://github.com/brettviren/org-pub/tree/master/pelican/site/themes/elegant"&gt;forked elegant&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline4"&gt;
&lt;h3 id="orgheadline4"&gt;&lt;span class="section-number-3"&gt;4.1&lt;/span&gt; Machinations&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-4-1"&gt;
&lt;p&gt;
Create an environment for building the web site
&lt;/p&gt;
&lt;pre class="example"&gt;
$ virtualenv venv
$ source venv/bin/activate
$ pip install pelican beautifulsoup4
&lt;/pre&gt;
&lt;p&gt;
Build the site
&lt;/p&gt;
&lt;pre class="example"&gt;
$ cd ~/org-pub/pelican/site
$ pelican
$ (cd output &amp;amp;&amp;amp; python -m pelican.server)
&lt;/pre&gt;
&lt;p&gt;
Content is held in &lt;code&gt;site/content/&lt;/code&gt; and exists as either immediate
files or relative symlinks to sub-directories of &lt;code&gt;topics/&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
That build locally.  Deployment is done with the help of the Fabric file and goes like:
&lt;/p&gt;
&lt;pre class="example"&gt;
$ pip install fabric
$
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2" id="outline-container-orgheadline6"&gt;
&lt;h2 id="orgheadline6"&gt;&lt;span class="section-number-2"&gt;5&lt;/span&gt; Links&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
There are other ways to use Org to make web pages.  Here are some I've looked at.
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://www.seas.upenn.edu/~heqin/academic/sitecreation.html"&gt;http://www.seas.upenn.edu/~heqin/academic/sitecreation.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://doc.norang.ca/org-mode.html"&gt;http://doc.norang.ca/org-mode.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.nicolas-petton.fr/blog/blogging-with-org-mode.html"&gt;http://www.nicolas-petton.fr/blog/blogging-with-org-mode.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stevenbagley.net/blog/blog-with-emacs-org-mode.html"&gt;http://stevenbagley.net/blog/blog-with-emacs-org-mode.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kerunix.com/blog-using-orgmode-and-pelican.html"&gt;http://kerunix.com/blog-using-orgmode-and-pelican.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://steckerhalter.co.vu/posts/blogging-with-org-mode.html"&gt;http://steckerhalter.co.vu/posts/blogging-with-org-mode.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://justinlilly.com/emacs/orgmode_static_site_generator.html"&gt;http://justinlilly.com/emacs/orgmode_static_site_generator.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="emacs"></category><category term="org"></category><category term="python"></category><category term="pelican"></category><category term="web"></category></entry><entry><title>Building with waf</title><link href="http://brettviren.github.io/waf" rel="alternate"></link><updated>2015-03-01T00:00:00-05:00</updated><author><name>Brett Viren</name></author><id>tag:brettviren.github.io,2014-03-01:waf</id><summary type="html">
&lt;p&gt;
The venerable workhorse of building software has long been &lt;a href="https://www.gnu.org/software/make/"&gt;&lt;code&gt;make&lt;/code&gt;&lt;/a&gt; driven by its quirky and sometimes cryptic &lt;code&gt;Makefile&lt;/code&gt; configurations.  Anytime I must write even a moderately complex build system based on &lt;code&gt;make&lt;/code&gt; I dream of having a simple, consistent and real programming language to describe the configuration instead of the language of a &lt;code&gt;Makefile&lt;/code&gt;.  Lacking it, when I use &lt;code&gt;make&lt;/code&gt; I end up relying on a zoo of external tools which leads to a hodgepodge.
&lt;/p&gt;
&lt;p&gt;
At some point I came across &lt;a href="http://www.scons.org/"&gt;&lt;code&gt;scons&lt;/code&gt;&lt;/a&gt; and thought my wishes were answered.  It uses the lovely Python programming language so must be perfect. Unfortunately as I tried to use it I found a few problems and personal dislikes.  It was difficult to extend and I found the built-in functionality awkward.  These are admittedly very personal judgments.
&lt;/p&gt;
&lt;p&gt;
More recently I came across &lt;a href="https://code.google.com/p/waf/"&gt;&lt;code&gt;waf&lt;/code&gt;&lt;/a&gt; and found it just about exactly what I was looking for.  It uses Python, it can be extended easily (it forms the basis of my meta-build system &lt;a href="https://github.com/brettviren/worch"&gt;worch&lt;/a&gt;).  It has good, if not great &lt;a href="http://docs.waf.googlecode.com/git/"&gt;documentation&lt;/a&gt;.  This latter issue is what this topic is meant to address.  It is written to collect my understanding as a user of waf and hopefully fill a needed gap.  It tries to provide concrete examples of how to do various things and refer to the official documentation wherever possible.
&lt;/p&gt;
&lt;div class="outline-2" id="outline-container-orgheadline1"&gt;
&lt;h2 id="orgheadline1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Gestalt of waf&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Waf is like &lt;code&gt;make&lt;/code&gt; but with a &lt;code&gt;Makefile&lt;/code&gt; called &lt;code&gt;wscript&lt;/code&gt; and written in Python.  Waf is unlike in several ways:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;waf can be &lt;a href="http://docs.waf.googlecode.com/git/book_17/single.html#_writing_re_usable_waf_tools"&gt;extended&lt;/a&gt; by providing Python modules loaded through &lt;code&gt;wscript&lt;/code&gt; files&lt;/li&gt;
&lt;li&gt;waf can be &lt;a href="http://docs.waf.googlecode.com/git/book_17/single.html#_obtaining_the_waf_file"&gt;bundled&lt;/a&gt; along with extensions to provide a single executable that performs specific tasks&lt;/li&gt;
&lt;li&gt;waf is cross-platform, no compilation needed and can be included as a single file along with the project it builds&lt;/li&gt;
&lt;li&gt;waf is parallel by default, it will run tasks as parallel as possible constrained by available CPU, dependencies or any limits imposed by the user&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2" id="outline-container-orgheadline4"&gt;
&lt;h2 id="orgheadline4"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; The waf configuration file&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Waf expects to find a file called &lt;code&gt;wscript&lt;/code&gt; in the current directory.  
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline2"&gt;
&lt;h3 id="orgheadline2"&gt;&lt;span class="section-number-3"&gt;2.1&lt;/span&gt; Commands&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;p&gt;
Functions in this file become exposed through waf as command line commands.  For example:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="font-weight: bold;"&gt;chirp&lt;/span&gt;(ctx):
    &lt;span style="font-weight: bold;"&gt;print&lt;/span&gt; (ctx)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
can be exercised as:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;&lt;span style="font-weight: bold;"&gt;cd&lt;/span&gt; examples/commands/
waf chirp
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class="example"&gt;
&amp;lt;waflib.Context.Context object at 0x28c0090&amp;gt;
'chirp' finished successfully (0.000s)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline3"&gt;
&lt;h3 id="orgheadline3"&gt;&lt;span class="section-number-3"&gt;2.2&lt;/span&gt; Context object&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-2"&gt;
&lt;p&gt;
A waf command function is given a context object.  This context object may be specialized depending on the function called.  The figure from the  &lt;a href="http://docs.waf.googlecode.com/git/apidocs_17/Context.html"&gt;context reference docs&lt;/a&gt; shows the inheritance:
&lt;/p&gt;
&lt;div class="figure" id="orgparagraph1"&gt;
&lt;p&gt;&lt;img alt="context-inheritance.png" src="./context-inheritance.png"/&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 1:&lt;/span&gt; Inheritance of context classes.  Note, the arrows are reversed from the sense they would be drawn in a UML inheritance diagram.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2" id="outline-container-orgheadline8"&gt;
&lt;h2 id="orgheadline8"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Predefined commands&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
Certain commands are reserved and treated special by waf.
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline5"&gt;
&lt;h3 id="orgheadline5"&gt;&lt;span class="section-number-3"&gt;3.1&lt;/span&gt; Options&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-1"&gt;
&lt;p&gt;
The &lt;code&gt;options(ctx)&lt;/code&gt; function will be passed an &lt;a href="http://docs.waf.googlecode.com/git/apidocs_17/Options.html"&gt;options&lt;/a&gt; context object.  This function can be used to define command line options that waf will recognize on behalf of the project.
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="font-weight: bold;"&gt;options&lt;/span&gt;(opt):
    opt.add_option(&lt;span style="font-style: italic;"&gt;'-x'&lt;/span&gt;,&lt;span style="font-style: italic;"&gt;'--extra'&lt;/span&gt;,action=&lt;span style="font-style: italic;"&gt;'store'&lt;/span&gt;, 
                   &lt;span style="font-weight: bold;"&gt;help&lt;/span&gt;=&lt;span style="font-style: italic;"&gt;'Add something extra from the command line'&lt;/span&gt;)

&lt;span style="font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="font-weight: bold;"&gt;chirp&lt;/span&gt;(ctx):
    &lt;span style="font-weight: bold;"&gt;print&lt;/span&gt; (&lt;span style="font-style: italic;"&gt;'The little bit of extra is: "%s"'&lt;/span&gt; % ctx.options.extra)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;&lt;span style="font-weight: bold;"&gt;cd&lt;/span&gt; examples/options/
waf --extra=&lt;span style="font-style: italic;"&gt;'Just a bit of extra stuff'&lt;/span&gt; chirp
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline6"&gt;
&lt;h3 id="orgheadline6"&gt;&lt;span class="section-number-3"&gt;3.2&lt;/span&gt; Configure&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-2"&gt;
&lt;p&gt;
The &lt;code&gt;configure(cfg)&lt;/code&gt; function is passed a &lt;a href="http://docs.waf.googlecode.com/git/apidocs_17/Configure.html"&gt;configuration&lt;/a&gt; context object.  This function can be used to persist any information between other command calls.  On possible use is to make command line options persisted.
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="font-weight: bold;"&gt;options&lt;/span&gt;(opt):
    opt.add_option(&lt;span style="font-style: italic;"&gt;'-x'&lt;/span&gt;,&lt;span style="font-style: italic;"&gt;'--extra'&lt;/span&gt;,action=&lt;span style="font-style: italic;"&gt;'store'&lt;/span&gt;, 
                   &lt;span style="font-weight: bold;"&gt;help&lt;/span&gt;=&lt;span style="font-style: italic;"&gt;'Add something extra from the command line'&lt;/span&gt;)

&lt;span style="font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="font-weight: bold;"&gt;configure&lt;/span&gt;(cfg):
    &lt;span style="font-weight: bold; font-style: italic;"&gt;cfg.env.EXTRA_MSG&lt;/span&gt; = &lt;span style="font-style: italic;"&gt;'The little bit of extra is: "%s"'&lt;/span&gt; % cfg.options.extra

&lt;span style="font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="font-weight: bold;"&gt;build&lt;/span&gt;(bld):
    &lt;span style="font-weight: bold;"&gt;print&lt;/span&gt; (bld.env.EXTRA_MSG)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;&lt;span style="font-weight: bold;"&gt;cd&lt;/span&gt; examples/configure/
waf -x &lt;span style="font-style: italic;"&gt;'Persist This'&lt;/span&gt; configure 
&lt;span style="font-weight: bold;"&gt;echo&lt;/span&gt; &lt;span style="font-style: italic;"&gt;"Configure done"&lt;/span&gt;
waf
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class="example"&gt;
Setting top to                           : /home/bv/org-pub/topics/waf/examples/configure 
Setting out to                           : /home/bv/org-pub/topics/waf/examples/configure/build 
'configure' finished successfully (0.003s)
Configure done
Waf: Entering directory `/home/bv/org-pub/topics/waf/examples/configure/build'
The little bit of extra is: "Persist This"
Waf: Leaving directory `/home/bv/org-pub/topics/waf/examples/configure/build'
'build' finished successfully (0.002s)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgheadline7"&gt;
&lt;h3 id="orgheadline7"&gt;&lt;span class="section-number-3"&gt;3.3&lt;/span&gt; Build&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-3"&gt;
&lt;p&gt;
In the &lt;code&gt;build(bld)&lt;/code&gt; function is where one describes to waf how to build everything.    It is passed a &lt;a href="http://docs.waf.googlecode.com/git/apidocs_17/Build.html"&gt;build&lt;/a&gt; context object.  There are several ways to do this but a simple and powerful way is to declare a task generator by calling &lt;code&gt;bld&lt;/code&gt; as a callable object.
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="font-weight: bold;"&gt;configure&lt;/span&gt;(cfg):
    &lt;span style="font-weight: bold;"&gt;return&lt;/span&gt;

&lt;span style="font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="font-weight: bold;"&gt;build&lt;/span&gt;(bld):
    bld(rule=&lt;span style="font-style: italic;"&gt;"date &amp;gt; ${TGT}"&lt;/span&gt;, target = &lt;span style="font-style: italic;"&gt;"one.txt"&lt;/span&gt;)
    bld(rule=&lt;span style="font-style: italic;"&gt;"cp ${SRC} ${TGT} &amp;amp;&amp;amp; date &amp;gt;&amp;gt; ${TGT}"&lt;/span&gt;, source=&lt;span style="font-style: italic;"&gt;"one.txt"&lt;/span&gt;, target=&lt;span style="font-style: italic;"&gt;"two.txt"&lt;/span&gt;)
    bld.install_files(&lt;span style="font-style: italic;"&gt;"${PREFIX}/examples"&lt;/span&gt;, &lt;span style="font-style: italic;"&gt;"one.txt two.txt"&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;&lt;span style="font-weight: bold;"&gt;cd&lt;/span&gt; examples/build
rm -rf build install
waf --prefix=install configure build install
ls -l build
ls -l install/examples
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class="example"&gt;
Setting top to                           : /home/bv/org-pub/topics/waf/examples/build 
Setting out to                           : /home/bv/org-pub/topics/waf/examples/build/build 
'configure' finished successfully (0.003s)
Waf: Entering directory `/home/bv/org-pub/topics/waf/examples/build/build'
[1/2] one.txt:  -&amp;gt; build/one.txt
[2/2] two.txt: build/one.txt -&amp;gt; build/two.txt
Waf: Leaving directory `/home/bv/org-pub/topics/waf/examples/build/build'
'build' finished successfully (0.015s)
Waf: Entering directory `/home/bv/org-pub/topics/waf/examples/build/build'
+ install /home/bv/org-pub/topics/waf/examples/build/install/examples/one.txt (from build/one.txt)
+ install /home/bv/org-pub/topics/waf/examples/build/install/examples/two.txt (from build/two.txt)
Waf: Leaving directory `/home/bv/org-pub/topics/waf/examples/build/build'
'install' finished successfully (0.005s)
total 16
drwxr-xr-x 2 bv bv 4096 Mar  1 19:10 c4che
-rw-r--r-- 1 bv bv  376 Mar  1 19:10 config.log
-rw-r--r-- 1 bv bv   29 Mar  1 19:10 one.txt
-rw-r--r-- 1 bv bv   58 Mar  1 19:10 two.txt
total 8
-rw-r--r-- 1 bv bv 29 Mar  1 19:10 one.txt
-rw-r--r-- 1 bv bv 58 Mar  1 19:10 two.txt
&lt;/pre&gt;
&lt;p&gt;
In this example two files are created, &lt;code&gt;one.txt&lt;/code&gt; out of thin air and &lt;code&gt;two.txt&lt;/code&gt; based on &lt;code&gt;one.txt&lt;/code&gt;.  Both of these files are then installed into a location based on the value of &lt;code&gt;PREFIX&lt;/code&gt; which is set by the standard waf &lt;code&gt;--prefix&lt;/code&gt; command line option.  A task is generated for each invocation of &lt;code&gt;bld()&lt;/code&gt; as set by the &lt;code&gt;rule&lt;/code&gt;.  Here the rule is a &lt;a href="http://docs.waf.googlecode.com/git/book_16/single.html#_scriptlet_expressions"&gt;scriptlet&lt;/a&gt; which is essentially a shell script command with some string interpolation.  As can be seen, file redirection and other shell operators can be used.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="overview"></category><category term="waf"></category></entry></feed>